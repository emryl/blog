<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lots of emryl</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.rylander.io/"/>
  <updated>2021-01-24T14:04:01.000Z</updated>
  <id>https://blog.rylander.io/</id>
  
  <author>
    <name>emryl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Remove Rogue Plugin (com.vmware.h4.vsphere.client) From VCenter</title>
    <link href="https://blog.rylander.io/2021/01/24/remove-rogue-plugin-com-vmware-h4-vsphere-client-from-vcenter/"/>
    <id>https://blog.rylander.io/2021/01/24/remove-rogue-plugin-com-vmware-h4-vsphere-client-from-vcenter/</id>
    <published>2021-01-24T14:04:01.000Z</published>
    <updated>2021-01-24T14:04:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/01/24/remove-rogue-plugin-com-vmware-h4-vsphere-client-from-vcenter/Screenshot_2021-01-24_at_14.42.52.png" loading="lazy"></p><p><img src="/2021/01/24/remove-rogue-plugin-com-vmware-h4-vsphere-client-from-vcenter/Screenshot_2021-01-24_at_14.43.07.png" loading="lazy"></p><p>This error seems to stem from one of the latest patch updates for VCenter Appliance that I’ve applied. In my case, I have a more recent version of this plugin which works, but the error messages are annoying.</p><p>This cannot be rectified by removing the plugin as it is not listed as actionable there.</p><p>Fortunately other have been affected too and a solution found and described which I followed. See the instructions I used <a href="https://communities.vmware.com/t5/vCenter-Server-Discussions/Duplicate-instance-of-VMware-Cloud-Director-Availability/td-p/2819378">here</a>:  </p><p>The actual commands apply to VCA 7 only, slightly other paths are used for 6.7.</p><p>SSH into the VCA and drop to shell:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/lib/vmware-lookupsvc/tools/lstool.py list --ep-type com.vmware.cis.vsphereclient.plugin --url  http://localhost:7090/lookupservice/sdk</span><br></pre></td></tr></table></figure><p>I had three versions where the latest (0.4.1.0) didn’t throw errors. </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">----------------------------------------------------</span><br><span class="line">Service Product: com.vmware.h4</span><br><span class="line">Service Type: vsphere.client</span><br><span class="line">Service ID: 70506b97-fef8-4fef-afd3-53c4deb06464</span><br><span class="line">Site ID: default-site</span><br><span class="line">Node ID: bb86ec52-093c-45cf-a9fe-75b39b46bd93</span><br><span class="line">Owner ID: vsphere-webclient-1b641923-9508-43ee-bbd2-9417b8c39105@vsphere.local</span><br><span class="line">Version: 0.3.5.0</span><br><span class="line">Endpoints:</span><br><span class="line">Type: com.vmware.cis.vsphereclient.plugin</span><br><span class="line">Protocol: http</span><br><span class="line">URL: https://vcenter.rylander.io:443/ui/plugins/h4va.zip</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">-------------------------------------------------------</span><br><span class="line">Service Product: com.vmware.h4</span><br><span class="line">Service Type: vsphere.client</span><br><span class="line">Service ID: a8572c79-6b15-4021-a4bb-5d144f72bf40</span><br><span class="line">Site ID: default-site</span><br><span class="line">Node ID: bb86ec52-093c-45cf-a9fe-75b39b46bd93</span><br><span class="line">Owner ID: vsphere-webclient-1b641923-9508-43ee-bbd2-9417b8c39105@vsphere.local</span><br><span class="line">Version: 0.4.0.0</span><br><span class="line">Endpoints:</span><br><span class="line">Type: com.vmware.cis.vsphereclient.plugin</span><br><span class="line">Protocol: http</span><br><span class="line">URL: https://vcenter.rylander.io:443/ui/plugins/h4va.zip</span><br></pre></td></tr></table></figure><p><img src="/2021/01/24/remove-rogue-plugin-com-vmware-h4-vsphere-client-from-vcenter/Screenshot_2021-01-24_at_14.45.30.png" loading="lazy"></p><p>The command lists all versions but I only want to remove the two failing ones.</p><p>Version: 0.3.5.0</p><p>Service ID: 70506b97-fef8-4fef-afd3-53c4deb06464</p><p>Remember to enter the proper password!</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/lib/vmware-lookupsvc/tools/lstool.py unregister --url http://localhost:7090/lookupservice/sdk --user administrator@vsphere.local --password ****** --id 70506b97-fef8-4fef-afd3-53c4deb06464 --no-check-cert</span><br></pre></td></tr></table></figure><p>Version: 0.4.0.0</p><p>Service ID: a8572c79-6b15-4021-a4bb-5d144f72bf40</p><p>Remember to enter the proper password!</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/lib/vmware-lookupsvc/tools/lstool.py unregister --url http://localhost:7090/lookupservice/sdk --user administrator@vsphere.local --password ****** --id a8572c79-6b15-4021-a4bb-5d144f72bf40 --no-check-cert</span><br></pre></td></tr></table></figure><p>When done restart the service which will kick you out of the UI.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vmon-cli -r vsphere-ui</span><br></pre></td></tr></table></figure><p><img src="/2021/01/24/remove-rogue-plugin-com-vmware-h4-vsphere-client-from-vcenter/Screenshot_2021-01-24_at_14.52.00.png" loading="lazy"></p><p>Voila, no more errors!</p><p><img src="/2021/01/24/remove-rogue-plugin-com-vmware-h4-vsphere-client-from-vcenter/Screenshot_2021-01-24_at_14.52.36.png" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2021/01/24/remove-rogue-plugin-com-vmware-h4-vsphere-client-from-vcenter/Screenshot_2021-01-24_at_14.42.52.png&quot; loading=&quot;lazy&quot;
      
    
    </summary>
    
    
      <category term="vmware" scheme="https://blog.rylander.io/tags/vmware/"/>
    
      <category term="vcenter" scheme="https://blog.rylander.io/tags/vcenter/"/>
    
  </entry>
  
  <entry>
    <title>Switch Appliance Shells in vCenter (To Install Updates)</title>
    <link href="https://blog.rylander.io/2021/01/18/switch-shells-in-vcenter-to-install-updates/"/>
    <id>https://blog.rylander.io/2021/01/18/switch-shells-in-vcenter-to-install-updates/</id>
    <published>2021-01-18T20:23:12.000Z</published>
    <updated>2021-01-18T20:23:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/01/18/switch-shells-in-vcenter-to-install-updates/shell.png" loading="lazy"></p><p>Switching the vCenter Server Appliance to Appliance Shell</p><p>Currently, the vCSA is bundled with these supported shells:<br>BASH Shell<br>Appliance Shell<br>Switching the vCenter Server Appliance 6.x to BASH Shell</p><p>Log in to the vCenter Server Appliance through SSH.<br>Run this command to enable access the Bash shell:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell.set --enabled <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>Type shell and press Enter.<br>In the temporary BASH shell, run this command to permanently configure the default Shell to BASH for Root:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/bash root</span><br></pre></td></tr></table></figure><p>Log out from the BASH Shell.<br>Log in again for the changes to take effect.</p><p>Note: For 6.7 please do the below.<br>Log in to the vCenter Server Appliance through SSH.<br>Type shell and press Enter.<br>In the temporary BASH shell, run this command to permanently configure the default Shell to BASH for Root:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/bash root</span><br></pre></td></tr></table></figure><p>Log out from the BASH Shell.<br>Log in again for the changes to take effect.</p><p>Log in to the vCenter Server Appliance through SSH.<br>Run this command to change from using the BASH Shell to the Appliance Shell:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/appliancesh root</span><br></pre></td></tr></table></figure><p>Log out from the Appliance Shell.<br>Log in again for the changes to take effect.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2021/01/18/switch-shells-in-vcenter-to-install-updates/shell.png&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;p&gt;Switching the vCenter Server Applianc
      
    
    </summary>
    
    
      <category term="esxi" scheme="https://blog.rylander.io/tags/esxi/"/>
    
      <category term="vcenter" scheme="https://blog.rylander.io/tags/vcenter/"/>
    
  </entry>
  
  <entry>
    <title>RDP Support on a Raspberry Pi</title>
    <link href="https://blog.rylander.io/2020/12/29/rdp-support-on-a-raspberry-pi/"/>
    <id>https://blog.rylander.io/2020/12/29/rdp-support-on-a-raspberry-pi/</id>
    <published>2020-12-29T21:35:30.000Z</published>
    <updated>2020-12-29T21:35:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/12/29/rdp-support-on-a-raspberry-pi/Screenshot_2020-12-29_at_23.29.11_2.png" loading="lazy"><br>Support for RDP on a Linux extends to cover Raspberry Pi as well. Performance is very nice. And installation is quick and painless.</p><p><img src="/2020/12/29/rdp-support-on-a-raspberry-pi/Screenshot_2020-12-29_at_23.01.36.png" loading="lazy"></p><p><img src="/2020/12/29/rdp-support-on-a-raspberry-pi/Screenshot_2020-12-29_at_23.02.57.png" loading="lazy"></p><p>It doesn’t update the resolution, but you can set the wanted resolution and size the window to it. Copy/paste operations work well.</p><p><img src="/2020/12/29/rdp-support-on-a-raspberry-pi/Screenshot_2020-12-29_at_23.31.22.png" loading="lazy"></p><p>Redirecting local folders to the target works well.</p><p><img src="/2020/12/29/rdp-support-on-a-raspberry-pi/Screenshot_2020-12-29_at_23.29.11.png" loading="lazy"></p><p>Also works well across a 4G connection, wireguard VPN on a smartphone.</p><p><img src="/2020/12/29/rdp-support-on-a-raspberry-pi/IMG_5464.png" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2020/12/29/rdp-support-on-a-raspberry-pi/Screenshot_2020-12-29_at_23.29.11_2.png&quot; loading=&quot;lazy&quot;&gt;&lt;br&gt;Support for RDP on a Linu
      
    
    </summary>
    
    
      <category term="rpi" scheme="https://blog.rylander.io/tags/rpi/"/>
    
      <category term="esxi-arm" scheme="https://blog.rylander.io/tags/esxi-arm/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 20.04 LTS Focal (Arm64) on ESXi-Arm</title>
    <link href="https://blog.rylander.io/2020/12/24/ubuntu-20-04-lts-focal-arm64-on-esxi-arm/"/>
    <id>https://blog.rylander.io/2020/12/24/ubuntu-20-04-lts-focal-arm64-on-esxi-arm/</id>
    <published>2020-12-24T22:07:29.000Z</published>
    <updated>2020-12-24T22:07:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>A short HOWTO creating an Ubuntu VM running on ESXi-Arm.</p><p><img src="/2020/12/24/ubuntu-20-04-lts-focal-arm64-on-esxi-arm/thumbnail.png" loading="lazy"></p><h3 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h3><p><a href="https://ubuntu.com/download/server/arm">https://ubuntu.com/download/server/arm</a></p><p>Quickly select the “Install” option in the GRUB boot screen, or you will be very sorry later on.<br><img src="/2020/12/24/ubuntu-20-04-lts-focal-arm64-on-esxi-arm/Screenshot_2020-12-24_at_00.04.37.png" loading="lazy"></p><p>English is fine<br><img src="/2020/12/24/ubuntu-20-04-lts-focal-arm64-on-esxi-arm/Screenshot_2020-12-24_at_00.06.39.png" loading="lazy"></p><p>I always opt for US English for the UI, however need Swedish for the keyboard.<br><img src="/2020/12/24/ubuntu-20-04-lts-focal-arm64-on-esxi-arm/Screenshot_2020-12-24_at_00.07.08.png" loading="lazy"></p><p>Choose DHCP or Static<br><img src="/2020/12/24/ubuntu-20-04-lts-focal-arm64-on-esxi-arm/Screenshot_2020-12-24_at_00.07.45.png" loading="lazy"></p><p>Opt to install OpenSSH here or do it later via cli.<br><img src="/2020/12/24/ubuntu-20-04-lts-focal-arm64-on-esxi-arm/Screenshot_2020-12-24_at_00.08.42.png" loading="lazy"></p><p>Wait some time for installation…<br><img src="/2020/12/24/ubuntu-20-04-lts-focal-arm64-on-esxi-arm/Screenshot_2020-12-24_at_00.09.01.png" loading="lazy"><br>and alot more for the security updates.<br><img src="/2020/12/24/ubuntu-20-04-lts-focal-arm64-on-esxi-arm/Screenshot_2020-12-24_at_00.09.24.png" loading="lazy"></p><h3 id="Update-apt"><a href="#Update-apt" class="headerlink" title="Update apt"></a>Update apt</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt upgrade -y</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>The package net-tools is a convenient utility for managing network communications from the command line:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install net-tools</span><br></pre></td></tr></table></figure><h3 id="Enable-sudo-without-password"><a href="#Enable-sudo-without-password" class="headerlink" title="Enable sudo without password"></a><strong>Enable sudo without password</strong></h3><p>This provides the feature of not being requested the password every time you need to use <em>sudo</em>. Edit the configuration with the following command:</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo visudo</span></span><br></pre></td></tr></table></figure><p>This will open the <em>nano</em> editor with that configuration. Then add the following line at the end (we assume that the username is <em>admlocal</em>):</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">admlocal ALL=(ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure><h3 id="Installation-vmware-tools"><a href="#Installation-vmware-tools" class="headerlink" title="Installation vmware tools"></a><strong>Installation vmware tools</strong></h3><ol><li><p>Open a Terminal or connect with SSH to your Ubuntu.<br>Either run this script or follow the manual steps below.</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> curl https://gist.githubusercontent.com/mry/<span class="number">058</span>de<span class="number">7</span>cf<span class="number">95</span>a<span class="number">89</span>e<span class="number">5519</span>c<span class="number">6</span>bd<span class="number">0400</span>f<span class="number">5437</span>d/raw/e<span class="number">513058</span>db<span class="number">5</span>edd<span class="number">08263469</span>d<span class="number">76025</span>da<span class="number">8</span>f<span class="number">0</span>d<span class="number">8</span>b<span class="number">0632</span>e/install_openvm_tools.sh | sudo bash</span><br></pre></td></tr></table></figure></li><li><p>Install tools and libraries that are required to build open-vm-tools.</p> <figure class="highlight q"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br><span class="line">apt install -y git automake make gobjc++ libtool pkg-config libmspack-<span class="built_in">dev</span> libglib2<span class="number">.0</span>-<span class="built_in">dev</span> libpam0g-<span class="built_in">dev</span> libssl-<span class="built_in">dev</span> libxml2-<span class="built_in">dev</span> libxmlsec1-<span class="built_in">dev</span> libx11-<span class="built_in">dev</span> libxext-<span class="built_in">dev</span> libxinerama-<span class="built_in">dev</span> libxi-<span class="built_in">dev</span> libxrender-<span class="built_in">dev</span> libxrandr-<span class="built_in">dev</span> libxtst-<span class="built_in">dev</span> libgdk-pixbuf2<span class="number">.0</span>-<span class="built_in">dev</span> libgtk<span class="number">-3</span>-<span class="built_in">dev</span> libgtkmm<span class="number">-3.0</span>-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure></li><li><p>Clone VMware’s official open-vm-tools repository from GitHub.</p> <figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/vmware/<span class="keyword">open</span>-<span class="keyword">vm</span>-tools.git</span><br><span class="line"><span class="keyword">cd</span> <span class="keyword">open</span>-<span class="keyword">vm</span>-tools/<span class="keyword">open</span>-<span class="keyword">vm</span>-tools/</span><br></pre></td></tr></table></figure></li><li><p>Compile open-vm-tools.</p> <figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">autoreconf -i</span><br><span class="line">./configure --<span class="keyword">disable</span>-dependency-tracking</span><br><span class="line"><span class="built_in">make</span></span><br><span class="line"><span class="built_in">make</span> install</span><br><span class="line">ldconfig</span><br></pre></td></tr></table></figure></li><li><p>Create a unit file. The file is required to run vmtoolsd as service with systemd.</p> <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">cat &gt; /etc/systemd/system/vmtoolsd.service &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line"><span class="attribute">Description</span>=Service <span class="keyword">for</span> virtual machines hosted on VMware</span><br><span class="line"><span class="attribute">Documentation</span>=http://github.com/vmware/open-vm-tools</span><br><span class="line"><span class="attribute">After</span>=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"><span class="attribute">ExecStart</span>=/usr/local/bin/vmtoolsd</span><br><span class="line"><span class="attribute">Restart</span>=always</span><br><span class="line"><span class="attribute">TimeoutStopSec</span>=5</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line"><span class="attribute">WantedBy</span>=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>Enable and start the open-vm-tools service.</p> <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">systemctl</span> <span class="selector-tag">enable</span> <span class="selector-tag">vmtoolsd</span><span class="selector-class">.service</span></span><br><span class="line"><span class="selector-tag">systemctl</span> <span class="selector-tag">start</span> <span class="selector-tag">vmtoolsd</span><span class="selector-class">.service</span></span><br></pre></td></tr></table></figure></li><li><p>Verify that open-vm-tools are running</p> <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">systemctl</span> <span class="selector-tag">status</span> <span class="selector-tag">vmtoolsd</span><span class="selector-class">.service</span></span><br></pre></td></tr></table></figure><p> <img src="/2020/12/24/ubuntu-20-04-lts-focal-arm64-on-esxi-arm/Screenshot_2020-12-24_at_00.40.11.png" loading="lazy"></p><p> You should now see that VMware Tools are running in the vSphere Client.</p><p> And picked up by the ESXi host</p><p> <img src="/2020/12/24/ubuntu-20-04-lts-focal-arm64-on-esxi-arm/Screenshot_2020-12-24_at_00.41.11.png" loading="lazy"></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;A short HOWTO creating an Ubuntu VM running on ESXi-Arm.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/12/24/ubuntu-20-04-lts-focal-arm64-on-esxi-arm/thumbnail.
      
    
    </summary>
    
    
      <category term="esxi" scheme="https://blog.rylander.io/tags/esxi/"/>
    
      <category term="ubuntu" scheme="https://blog.rylander.io/tags/ubuntu/"/>
    
      <category term="esxi-arm" scheme="https://blog.rylander.io/tags/esxi-arm/"/>
    
  </entry>
  
  <entry>
    <title>Flakey USB Z-Stick Support on RPi</title>
    <link href="https://blog.rylander.io/2020/12/24/flakey-usb-z-stick-support-on-rpi/"/>
    <id>https://blog.rylander.io/2020/12/24/flakey-usb-z-stick-support-on-rpi/</id>
    <published>2020-12-24T17:10:56.000Z</published>
    <updated>2020-12-24T17:10:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>Talk about flakey behaviour! Luckily I’m not the first but probably not the last to figure out that some USB sticks just doesn’t play nice with some Raspberrys.<br>My Aeotec Z-Stick Gen 5 wasn’t recognized as expected by my RPi4.<br>The <a href="https://www.raspberrypi.org/forums/viewtopic.php?t=245031">solution</a> is rather simple, put a dumb USB 2.0 hub in between, and the USB stick is recognized by the Raspberry!</p><p>When using a USB 2.0 hub, the stick magically appears, as expected!<br><img src="/2020/12/24/flakey-usb-z-stick-support-on-rpi/Screenshot_2020-12-24_at_18.55.08.png" loading="lazy"></p><p>And is now selectable to pass to the VM</p><p><img src="/2020/12/24/flakey-usb-z-stick-support-on-rpi/Screenshot_2020-12-24_at_18.55.36.png" loading="lazy"></p><p><img src="/2020/12/24/flakey-usb-z-stick-support-on-rpi/Screenshot_2020-12-24_at_18.55.59.png" loading="lazy"></p><p>And is usable within the guest VM (Ubuntu hosting HA in a Docker container)<br><img src="/2020/12/24/flakey-usb-z-stick-support-on-rpi/Screenshot_2020-12-24_at_19.05.53.png" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Talk about flakey behaviour! Luckily I’m not the first but probably not the last to figure out that some USB sticks just doesn’t play nic
      
    
    </summary>
    
    
      <category term="esxi" scheme="https://blog.rylander.io/tags/esxi/"/>
    
      <category term="rpi" scheme="https://blog.rylander.io/tags/rpi/"/>
    
      <category term="usb" scheme="https://blog.rylander.io/tags/usb/"/>
    
      <category term="esxi-arm64" scheme="https://blog.rylander.io/tags/esxi-arm64/"/>
    
  </entry>
  
  <entry>
    <title>Setting Up Docker on Ubuntu 20.04 Focal (Arm64)</title>
    <link href="https://blog.rylander.io/2020/12/23/setting-up-docker-on-ubuntu-20-04-focal-arm64/"/>
    <id>https://blog.rylander.io/2020/12/23/setting-up-docker-on-ubuntu-20-04-focal-arm64/</id>
    <published>2020-12-23T08:29:27.000Z</published>
    <updated>2020-12-23T08:29:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Installing Docker</strong></p><p>First add the required dependencies and the security key:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure><p>Add Docker’s official GPG key:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>Make sure that the key fingerprint is <em>9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88</em>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-key fingerprint 0EBFCD88</span><br></pre></td></tr></table></figure><p>Add the Docker repository corresponding to your CPU architecture and Operating System version (<em>arch=arm64</em>):</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=arm64] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure><p>If instead of a 64 bits OS, you want the 32 bits version (also covered by Raspberry Pi 4), you should change the reference to the architecture **in the previous command to <em>[arch=armhf]</em>.</p><p>Finally update the repository sources:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>Also guarantee that you are about to install from the official Docker repository, instead of the default Ubuntu repo:</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">apt-cache <span class="keyword">policy</span> docker-ce</span><br></pre></td></tr></table></figure><p><img src="/2020/12/23/setting-up-docker-on-ubuntu-20-04-focal-arm64/Screenshot_2020-12-24_at_01.17.41.png" loading="lazy"></p><p>We have finished setting up the repository!!</p><p>Then install Docker:</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> -y install docker-ce</span><br></pre></td></tr></table></figure><p>Check version</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker -v</span><br></pre></td></tr></table></figure><p>Add your user to docker group:</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> usermod -aG docker <span class="variable">$&#123;USER&#125;</span></span><br></pre></td></tr></table></figure><p>So that this change takes effect you have log out and log in again.</p><p><strong>Installing Docker Compose</strong></p><p>This component **is avaible as a Python package that makes very easy its installation. First install the Python package manager:</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> apt install python<span class="number">3</span>-pip</span><br></pre></td></tr></table></figure><p>Then install Docker Compose:</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> pip<span class="number">3</span> install docker-compose</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Installing Docker&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First add the required dependencies and the security key:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;t
      
    
    </summary>
    
    
      <category term="arm64" scheme="https://blog.rylander.io/tags/arm64/"/>
    
      <category term="ubuntu" scheme="https://blog.rylander.io/tags/ubuntu/"/>
    
      <category term="docker" scheme="https://blog.rylander.io/tags/docker/"/>
    
      <category term="k8s" scheme="https://blog.rylander.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>How to Remove Cloud-Init From Ubuntu Server 20.04</title>
    <link href="https://blog.rylander.io/2020/12/23/how-to-remove-cloud-init-from-ubuntu-server-20-04/"/>
    <id>https://blog.rylander.io/2020/12/23/how-to-remove-cloud-init-from-ubuntu-server-20-04/</id>
    <published>2020-12-23T08:05:30.000Z</published>
    <updated>2020-12-23T08:05:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/12/23/how-to-remove-cloud-init-from-ubuntu-server-20-04/Screenshot_2021-01-02_at_09.19.25.png" loading="lazy"></p><p><em>Method 1: Disable cloud-init from file</em></p><p>This is the safest and the easiest method.We only need to create <code>cloud-init.disabled</code> file in /etc/cloud directory and reboot the system.</p><ul><li>To create empty file, issue this comand:</li></ul><p><code>sudo touch /etc/cloud/cloud-init.disabled</code></p><ul><li>and reboot:</li></ul><p><code>init 6</code></p><p><em>Method 2: Remove cloud-init package and folder</em></p><p>This last method is not disabling cloud-init but completely removing cloud-init package from your Ubuntu Server machine.</p><ul><li>Remove cloud-init package completely</li></ul><p><code>sudo apt purge cloud-init -y</code></p><ul><li>Remove /etc/cloud folder</li></ul><p><code>sudo rm -rf /etc/cloud &amp;&amp; sudo rm -rf /var/lib/cloud/</code></p><ul><li>Reboot the system</li></ul><p><code>init 6</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2020/12/23/how-to-remove-cloud-init-from-ubuntu-server-20-04/Screenshot_2021-01-02_at_09.19.25.png&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em
      
    
    </summary>
    
    
      <category term="ubuntu" scheme="https://blog.rylander.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Setting Up Tailscale on Ubuntu 20.04 LTS Focal (Aarch64)</title>
    <link href="https://blog.rylander.io/2020/12/22/Setting-up-Tailscale-on-Ubuntu-20-04-LTS-focal-aarch64/"/>
    <id>https://blog.rylander.io/2020/12/22/Setting-up-Tailscale-on-Ubuntu-20-04-LTS-focal-aarch64/</id>
    <published>2020-12-22T19:04:51.000Z</published>
    <updated>2020-12-22T19:04:51.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/12/22/Setting-up-Tailscale-on-Ubuntu-20-04-LTS-focal-aarch64/tailscale_banner.png" class=""><p>Tailscale is available as packages even on the aarch64 platform (RPi and such arm64 platforms).</p><ol><li><p>Add Tailscale’s package signing key and repository</p> <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl -fsSL https:<span class="regexp">//</span>pkgs.tailscale.com<span class="regexp">/stable/u</span>buntu/focal.gpg | sudo apt-key add -</span><br><span class="line">curl -fsSL https:<span class="regexp">//</span>pkgs.tailscale.com<span class="regexp">/stable/u</span>buntu<span class="regexp">/focal.list | sudo tee /</span>etc<span class="regexp">/apt/</span>sources.list.d/tailscale.list</span><br></pre></td></tr></table></figure></li><li><p>Install Tailscale</p> <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> update</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install tailscale</span><br></pre></td></tr></table></figure></li><li><p>Authenticate and connect your machine to your Tailscale network</p> <figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo tailscale up</span></span><br></pre></td></tr></table></figure><p> To also expose you local subnet and use this endpoint as a gateway. Use a comma to separate multiple routes.</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tailscale up --advertise-routes=10.0.1.0/24</span><br></pre></td></tr></table></figure></li><li><p>Visit the <a href="https://login2.tailscale.io/admin">admin console</a> and authorize your new endpoint. If you signed in with a <code>@gmail.com</code> address, it is automatically authorized. (Note: You will need to occasionally reauthenticate unless you <a href="https://tailscale.com/kb/1028/key-expiry">disable key expiry</a>.)</p> <img src="/2020/12/22/Setting-up-Tailscale-on-Ubuntu-20-04-LTS-focal-aarch64/Screenshot_2020-12-25_at_22.38.00.png" class=""> <img src="/2020/12/22/Setting-up-Tailscale-on-Ubuntu-20-04-LTS-focal-aarch64/Screenshot_2020-12-25_at_22.37.35.png" class=""></li><li><p>Obtain your Tailscale IP address</p> <figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">ip <span class="keyword">addr </span><span class="keyword">show </span>tailscale0</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2020/12/22/Setting-up-Tailscale-on-Ubuntu-20-04-LTS-focal-aarch64/tailscale_banner.png&quot; class=&quot;&quot;&gt;

&lt;p&gt;Tailscale is available as p
      
    
    </summary>
    
    
      <category term="rpi" scheme="https://blog.rylander.io/tags/rpi/"/>
    
      <category term="wireguard" scheme="https://blog.rylander.io/tags/wireguard/"/>
    
  </entry>
  
  <entry>
    <title>Boot ESXi-Arm Fling on a Raspberry Pi 4 Using ISCSI</title>
    <link href="https://blog.rylander.io/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/"/>
    <id>https://blog.rylander.io/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/</id>
    <published>2020-12-22T17:59:00.000Z</published>
    <updated>2021-02-06T16:14:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>It is really neat that you can treat your Pi to some remote storage that is stable and fast and even boot from it. I followed these steps to setup my Pis to boot ESXi-Arm, my goto hypervisor, and then spawn virtual Pi instances, just because reasons.</p><p>As always, check out this <strong><a href="https://blogs.vmware.com/arm/2020/10/17/esxi-arm-with-iscsi/">original post</a></strong> as well as the included guides for installation.</p><h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h3><ul><li>SD for each Pi (yes an SD is needed for UEFI booting)</li><li>One USB flashdrive or equivalent to use for ESXi-Arm installation media</li><li>Monitor and Keyboard (for sanity, though you can automate using kickstart)</li></ul><h2 id="ISCSI-Provider"><a href="#ISCSI-Provider" class="headerlink" title="ISCSI Provider"></a>ISCSI Provider</h2><p>As an ISCSI provider, I use a Synology NAS. It can also provide NFS storage and TFTP services.</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/Screenshot_2020-12-23_at_14.31.05.png" loading="lazy"></p><p>I have setup two targets, one for each physical Pi, with two LUNs respectively. One for boot (where ESXi-Arm is installed to) and the other for VMs.<br><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/Screenshot_2020-12-23_at_14.32.18.png" loading="lazy"></p><p>Initially I’ve turned off all fancy stuff to avoid issues such as CHAP authentication.</p><p>The most important is getting the typing right, with the awful iqn format, mistyping is easy. Keep em short is a pro tip.</p><p>The IQN string is entered into the Pi configuration, along with the NAS IP adress and the LUN number. The rest is not important for the setup.</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/Screenshot_2020-12-23_at_14.43.04.png" loading="lazy"></p><p>I used the proposed IQN and inserted the Target name to make the string unique</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/Screenshot_2020-12-23_at_14.43.25.png" loading="lazy"></p><p>This Target has these LUNs mapped</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/Screenshot_2020-12-23_at_14.42.03.png" loading="lazy"></p><p>The LUN used to booting are 8GB and uses Thick Provisioning. These are targets for the ESXi-Arm installation.</p><p>You can create Targets and LUNs separately and then map them together. Create one target per RPi. The boot LUN is 8GB (pre-allocated) and the datastore was given 120GB (thin provisioning). These will be selectable installing the ESXi-Arm on the Pi. You can add more LUNs later to a target, and these will be usable within ESXi-Arm to create additional ISCSI based datastores.</p><p>Ok, all done on the NAS side of things!</p><h2 id="Configuring-the-Raspberry-Pi"><a href="#Configuring-the-Raspberry-Pi" class="headerlink" title="Configuring the Raspberry Pi"></a>Configuring the Raspberry Pi</h2><p>The most important is to update the Pi to allow for remote boot using ISCSI. This is actually an update to the UEFI component. You can download a standard RPi OS image but that will take longer and require you to type stuff.</p><h3 id="Update-EEPROM"><a href="#Update-EEPROM" class="headerlink" title="Update EEPROM"></a>Update EEPROM</h3><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/Screenshot_2020-12-22_at_19.47.00.png" loading="lazy"></p><p>The fastest way in terms of time, is to flash the EEPROM boot image on an SD card and boot the Pi to ensure the Pi is updated. This can be done without a monitor.</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/Screenshot_2020-12-22_at_20.16.01.png" loading="lazy"></p><p>I used to the handy GUI tool <strong><a href="https://www.raspberrypi.org/software/">Raspberry Pi Imager</a></strong> since it allows me to download and flash the full range of Pi stuff.</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/Screenshot_2020-12-22_at_20.15.17.png" loading="lazy"></p><p>The utility allows you to select and flash the EEPROM image to an SD card.</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/Screenshot_2020-12-22_at_19.49.49.png" loading="lazy"></p><p>Flashing is really fast and the SD card is now ready to use and is fully automated.</p><p>When booting you Pi using this SD card, the screen will turn green if successful. Now your Pi EEPROM has been updated (it only requires the update from September).</p><p>Reuse the same SD card to be used as a UEFI boot device. This can be replaced with a PXE based solution to load the same firmware using remote image.</p><h2 id="Setup-UEFI-on-SD-Card"><a href="#Setup-UEFI-on-SD-Card" class="headerlink" title="Setup UEFI on SD Card"></a>Setup UEFI on SD Card</h2><p>The SD card will be only used for UEFI firmware, so don’t bother with a big card. It will hold the ISCSI configuration.</p><h3 id="Download-the-necessary-bits"><a href="#Download-the-necessary-bits" class="headerlink" title="Download the necessary bits"></a><strong>Download the necessary bits</strong></h3><p>Download the latest official Raspberry Pi Firmware and extract the contents to your computer, you should have a folder called <strong><a href="https://github.com/raspberrypi/firmware/releases">firmware-master</a></strong>. Downlod the released source code you want.<br>This corresponds to the microcode necessary to initialize the Raspberry Pi.<br>Download the latest community Raspberry Pi 4 UEFI firmware and extract the contents to your computer, you should have a folder called <strong><a href="https://github.com/pftf/RPi4/releases/download/v1.21/RPi4_UEFI_Firmware_v1.21.zip">RPi4_UEFI_Firmware_v1.21</a></strong>. This is the firmware necessary to boot ESXi-Arm. </p><p>The v1.21 release is currently required for iSCSI booting. New EDK2 releases do not default to enable iSCSI due to weak security. However v1.21 contains a serious bug where a boot file is prone to get corrupted. I’ve temporarily released a bugfix based on v1.22 with iSCSI re-enabled. <a href="https://github.com/mry/RPi4/releases/download/v1.22-iscsi/RPi4_UEFI_Firmware_v1.22-iscsi.zip">Get it here</a> (but remember it is only temporary). <a href="https://github.com/mry/RPi4/releases">View other future releases</a>.</p><h3 id="Prepare-SD-card"><a href="#Prepare-SD-card" class="headerlink" title="Prepare SD card"></a><strong>Prepare SD card</strong></h3><p>Just delete the previous files from the SD card. It must be a FAT32 format, which it is.</p><p>You can easily do this using click and play in the GUI.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">diskutil list</span><br></pre></td></tr></table></figure><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/Screenshot_2020-12-22_at_20.24.59.png" loading="lazy"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> firmware-master/boot</span><br><span class="line">rm ./kernel*.img</span><br><span class="line">cp -rf ./* /Volumes/SDCARD/</span><br><span class="line">change folder</span><br><span class="line"><span class="built_in">cd</span> ../..</span><br><span class="line">cp -rf ./RPi4_UEFI_Firmware_v1.21/* /Volumes/SDCARD</span><br><span class="line"></span><br><span class="line">diskutil eject /dev/disk3</span><br></pre></td></tr></table></figure><h3 id="UEFI-firmware-configuration"><a href="#UEFI-firmware-configuration" class="headerlink" title="UEFI firmware configuration"></a>UEFI firmware configuration</h3><p>Press <strong>ESC</strong> key to enter UEFI configuration screen.<br>With an HDMI screen, this is when you see the Raspberry Pi logo.</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/Untitled.png" loading="lazy"></p><p>If you see the progress bar, you’ve hit ESC too late. Hitting it once will suffice, but it will take some time load.</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/Untitled-1.png" loading="lazy"></p><p>Initial screen and we will use all three options in due course.</p><h3 id="Disable-3GiB-memory-limit"><a href="#Disable-3GiB-memory-limit" class="headerlink" title="Disable 3GiB memory limit"></a>Disable 3GiB memory limit</h3><p>The Raspberry Pi 4 UEFI is configured with a default limit of 3GiB of memory for OS compatibility purposes. This will prevent the ESXi installer from proceeding, and needs to be disabled.</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/Untitled-2.png" loading="lazy"></p><p>Using arrow keys, first navigate to <strong>Device Manager</strong></p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/Untitled-3.png" loading="lazy"></p><p>Press ENTER and navigate to Raspberry Pi Configuration</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/Untitled-4.png" loading="lazy"></p><p>Press ENTER and navigate to Advanced Configuration</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/Advanced_Configuration.png" loading="lazy"></p><p>Hit ENTER to change setting</p><p>![](Advanced_Configuration 1.png)</p><p>![](Advanced_Configuration 2.png)</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/Configuration_changed._Reset_to_apply_it_Now.png" loading="lazy"></p><h3 id="Configure-ISCSI"><a href="#Configure-ISCSI" class="headerlink" title="Configure ISCSI"></a>Configure ISCSI</h3><p>Install ESXi-Arm</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/Untitled-5.png" loading="lazy"></p><p>Enter UEFI configuration screen</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/Untitled-6.png" loading="lazy"></p><p>Select the ISCSI Configuration</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/Untitled-7.png" loading="lazy"></p><p>Give it a name, it’s just for information so keep it short</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/Untitled-8.png" loading="lazy"></p><p>Add an Attempt and select the NIC</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/Untitled-9.png" loading="lazy"></p><p>Set it to Enabled</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/Untitled-10.png" loading="lazy"></p><p>Enable DHCP for IP settings, or opt for static IP settings</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/Untitled-11.png" loading="lazy"></p><p>Enter the IQN created on the NAS, double check it is entered correctly.</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/Untitled-12.png" loading="lazy"></p><p>I opted for no authentication for this setup</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/IMG_5435.jpg" loading="lazy"></p><p>Set the LUN number from your NAS settings as well as IP address.</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/Untitled-13.png" loading="lazy"></p><p>All done, Save and ESC out</p><p>Reset (restart) and jump into the settings again.</p><p>This time, we set boot order and optimize a bit and also verify the settings.</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/Untitled-14.png" loading="lazy"></p><p>Select the “Boot Manager” option</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/IMG_5436.jpg" loading="lazy"></p><p>If the applied settings are correct the and the RPi has a connection to the ISCSI provider, it will show up in the list. If you don’t see it, there is most likely a misconfiguration on your end. Delete and start over within the RPi.</p><p>ESC out after verifying the ISCSI target has been found.</p><h2 id="Change-Boot-order"><a href="#Change-Boot-order" class="headerlink" title="Change Boot order"></a>Change Boot order</h2><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/IMG_5437.jpg" loading="lazy"></p><p>Use the Boot Maintenance Manager to set the boot order so your chosen option is not the last. Either move it up the chain or delete the other options. </p><h2 id="Prep-and-Install-ESXi-Arm"><a href="#Prep-and-Install-ESXi-Arm" class="headerlink" title="Prep and Install ESXi-Arm"></a>Prep and Install ESXi-Arm</h2><p>Use a USB flashdrive to boot the RPi and install the ESXi-Arm to the ISCSI target.</p><p>Download the installer ISO from VMWare and flash it to the boot media.</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/Screenshot_2020-12-22_at_21.29.55.png" loading="lazy"></p><p>Restart the Pi with the USB flashdrive inserted and have it boot. The installer will start automatically.</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/IMG_5438.jpg" loading="lazy"></p><p>And eventually display the list of available install targets. If you wanted, you could install ESXi-Arm on the same USB as used for booting, but here we select the remote ISCSI target as the install device.</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/IMG_5439.jpg" loading="lazy"></p><p>All available LUNs will be displayed on the target, here I only exposed the 8GB LUN.</p><p>Installation is surprisingly quick</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/IMG_5440.jpg" loading="lazy"></p><p>Remove the USB device so when restarted the Pi will boot using the ISCSI target.</p><p>The SD card will need to be inserted all the time, unless moving to a PXE setup.</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/Screenshot_2020-12-22_at_21.46.50.png" loading="lazy"></p><p>A virgin setup requires some more tinkering in the UI</p><h2 id="Configure-NTP"><a href="#Configure-NTP" class="headerlink" title="Configure NTP"></a>Configure NTP</h2><p>As the RPi does not have an internal clock, configure ESXi-Arn to use NTP.</p><p><img src="/2020/12/22/Boot-ESXi-Arm-Fling-on-a-Raspberry-Pi-4-using-ISCSI/Screenshot_2020-12-23_at_15.35.00.png" loading="lazy"></p><p>Set the service to start with the host and give it a few NTP servers. It takes a few seconds for it to come up.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;It is really neat that you can treat your Pi to some remote storage that is stable and fast and even boot from it. I followed these steps
      
    
    </summary>
    
    
      <category term="esxi" scheme="https://blog.rylander.io/tags/esxi/"/>
    
      <category term="rpi" scheme="https://blog.rylander.io/tags/rpi/"/>
    
      <category term="arm64" scheme="https://blog.rylander.io/tags/arm64/"/>
    
  </entry>
  
  <entry>
    <title>Automatically Update vCenter 7 Certificates Using LetsEncrypt and Acme.sh</title>
    <link href="https://blog.rylander.io/2020/12/05/automatically-update-vcenter-7-certificates-using-letsencrypt-and-acme-sh/"/>
    <id>https://blog.rylander.io/2020/12/05/automatically-update-vcenter-7-certificates-using-letsencrypt-and-acme-sh/</id>
    <published>2020-12-05T06:45:38.000Z</published>
    <updated>2020-12-05T06:45:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>First, install and verify acme.sh on your vCenter installation as outlined here <a href="/2020/12/05/install-lets-encrypt-acme-sh-on-vcenter-7/" title="Install Lets Encrypt acme.sh on vCenter 7">Install Lets Encrypt acme.sh on vCenter 7</a>. </p><p>Let’s run through a manual update of the newly created LetsEncrypt certificates generated from the above.</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">/<span class="selector-tag">root</span>/<span class="selector-class">.acme</span><span class="selector-class">.sh</span>/<span class="selector-tag">vcenter</span><span class="selector-class">.rylander</span><span class="selector-class">.io</span>/<span class="selector-tag">vcenter</span><span class="selector-class">.rylander</span><span class="selector-class">.io</span><span class="selector-class">.cer</span></span><br><span class="line">/<span class="selector-tag">root</span>/<span class="selector-class">.acme</span><span class="selector-class">.sh</span>/<span class="selector-tag">vcenter</span><span class="selector-class">.rylander</span><span class="selector-class">.io</span>/<span class="selector-tag">vcenter</span><span class="selector-class">.rylander</span><span class="selector-class">.io</span><span class="selector-class">.key</span></span><br><span class="line">/<span class="selector-tag">root</span>/<span class="selector-class">.acme</span><span class="selector-class">.sh</span>/<span class="selector-tag">vcenter</span><span class="selector-class">.rylander</span><span class="selector-class">.io</span>/<span class="selector-tag">fullchain</span><span class="selector-class">.cer</span></span><br></pre></td></tr></table></figure><p>Fire up the Certificate Manager and install the new cert. Log into the vcenter host and drop to the shell. This does require that you have enabled access in the first place, both to SSH and also to enable Shell access.</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>lib<span class="regexp">/vmware-vmca/</span>bin/certificate-manager</span><br></pre></td></tr></table></figure><p><img src="/2020/12/05/automatically-update-vcenter-7-certificates-using-letsencrypt-and-acme-sh/Screenshot_2020-12-04_at_22.15.28.png" loading="lazy"></p><p>From the main menu, select “1”</p><p><img src="/2020/12/05/automatically-update-vcenter-7-certificates-using-letsencrypt-and-acme-sh/Screenshot_2020-12-04_at_22.16.18.png" loading="lazy"></p><p>And then to “Import”</p><p><img src="/2020/12/05/automatically-update-vcenter-7-certificates-using-letsencrypt-and-acme-sh/Screenshot_2020-12-04_at_22.43.52.png" loading="lazy"></p><p>Enter the required file names when asked, first the certificate, then your secret private key and lastly the trust chain.</p><p>Confirm you want to proceed.</p><p><img src="/2020/12/05/automatically-update-vcenter-7-certificates-using-letsencrypt-and-acme-sh/Screenshot_2020-12-04_at_22.52.47.png" loading="lazy"></p><p><img src="/2020/12/05/automatically-update-vcenter-7-certificates-using-letsencrypt-and-acme-sh/Screenshot_2020-12-04_at_22.52.24.png" loading="lazy"></p><p>The update is quite fast however restarting the services does take some time.</p><p>Check a working certificate is provided to your browser.</p><p><img src="/2020/12/05/automatically-update-vcenter-7-certificates-using-letsencrypt-and-acme-sh/Screenshot_2020-12-04_at_23.03.25.png" loading="lazy"></p><h2 id="Lets-automate-this"><a href="#Lets-automate-this" class="headerlink" title="Lets automate this"></a>Lets automate this</h2><p>Now, we’ll just copy the menu steps we just went through and automate the answers in a script.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget <span class="string">&#x27;https://raw.githubusercontent.com/emryl/vcenter-letsencrypt-auto-updater/main/auto-updater.sh&#x27;</span> -O auto-updater.sh</span><br><span class="line">chmod 755 ./auto-updater.sh</span><br><span class="line">wget <span class="string">&#x27;https://raw.githubusercontent.com/emryl/vcenter-letsencrypt-auto-updater/main/update.conf&#x27;</span>-O update.conf</span><br></pre></td></tr></table></figure><p>You can hardcode the options inside the script or use a configuration file (update.conf). Either download it as above or create it by hand.</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">cat &gt; update.conf</span><br><span class="line"><span class="attribute">CERTNAME</span>=<span class="string">&#x27;vcenter.rylander.io&#x27;</span></span><br><span class="line"><span class="attribute">ADMINACCOUNT</span>=<span class="string">&#x27;Administrator@vsphere.local&#x27;</span></span><br><span class="line"><span class="attribute">ADMINPASS</span>=<span class="string">&#x27;secretpassword&#x27;</span></span><br></pre></td></tr></table></figure><p>Set the configuration and then run the script and make sure there are no errors. You need to have new and valid certificate files in place first.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./auto-updater.sh</span><br></pre></td></tr></table></figure><p><img src="/2020/12/05/automatically-update-vcenter-7-certificates-using-letsencrypt-and-acme-sh/Screenshot_2020-12-05_at_16.24.30.png" loading="lazy"></p><p><img src="/2020/12/05/automatically-update-vcenter-7-certificates-using-letsencrypt-and-acme-sh/Screenshot_2020-12-05_at_16.25.03.png" loading="lazy"></p><p><img src="/2020/12/05/automatically-update-vcenter-7-certificates-using-letsencrypt-and-acme-sh/Screenshot_2020-12-05_at_16.34.16.png" loading="lazy"></p><h2 id="Schedule-it"><a href="#Schedule-it" class="headerlink" title="Schedule it"></a>Schedule it</h2><p>Create a crontab schedule (edit using ‘e’)</p><p>Every sunday, at 05.15 and 05.30</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -l</span><br><span class="line">15 5 * * sun <span class="string">&quot;/root/.acme.sh&quot;</span>/acme.sh --cron --home <span class="string">&quot;/root/.acme.sh&quot;</span> &gt; /dev/null</span><br><span class="line">30 5 * * sun <span class="string">&quot;/root/.acme.sh&quot;</span>/auto_updater.sh<span class="string">&quot;</span></span><br></pre></td></tr></table></figure><p>Useful during testing, you can add the —force flag, the script will renew every run. Just be careful to not exceed the limits. It may be wise to use the test URLs instead.</p><p><img src="/2020/12/05/automatically-update-vcenter-7-certificates-using-letsencrypt-and-acme-sh/Screenshot_2020-12-05_at_16.56.14.png" loading="lazy"></p><p>Test using cli before running it scheduled</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./acme.sh --cron --force --home <span class="string">&quot;/root/.acme.sh&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/2020/12/05/automatically-update-vcenter-7-certificates-using-letsencrypt-and-acme-sh/Screenshot_2020-12-05_at_16.23.32.png" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;First, install and verify acme.sh on your vCenter installation as outlined here &lt;a href=&quot;/2020/12/05/install-lets-encrypt-acme-sh-on-vcen
      
    
    </summary>
    
    
      <category term="esxi" scheme="https://blog.rylander.io/tags/esxi/"/>
    
      <category term="letsencrypt" scheme="https://blog.rylander.io/tags/letsencrypt/"/>
    
      <category term="vcenter" scheme="https://blog.rylander.io/tags/vcenter/"/>
    
  </entry>
  
  <entry>
    <title>Install Lets Encrypt acme.sh on vCenter 7</title>
    <link href="https://blog.rylander.io/2020/12/05/install-lets-encrypt-acme-sh-on-vcenter-7/"/>
    <id>https://blog.rylander.io/2020/12/05/install-lets-encrypt-acme-sh-on-vcenter-7/</id>
    <published>2020-12-05T05:37:03.000Z</published>
    <updated>2020-12-05T05:37:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>Straight from the official webpage: <a href="https://github.com/acmesh-official/acme.sh">https://github.com/acmesh-official/acme.sh</a></p><p>If you are brave, you can <a href="/2020/12/05/automatically-update-vcenter-7-certificates-using-letsencrypt-and-acme-sh/">automate Let’s Encrypt management for VCenter</a>.</p><p>The installer will perform 3 actions:</p><ol><li>Create and copy <code>acme.sh</code> to your home dir (<code>$HOME</code>): <code>~/.acme.sh/</code>. All certs will be placed in this folder too.</li><li>Create alias for: <code>acme.sh=~/.acme.sh/acme.sh</code>.</li><li>Create daily cron job to check and renew the certs if needed.</li></ol><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">wget -O -  http<span class="variable">s:</span>//<span class="built_in">get</span>.acme.<span class="keyword">sh</span> | <span class="keyword">sh</span></span><br></pre></td></tr></table></figure><p><img src="/2020/12/05/install-lets-encrypt-acme-sh-on-vcenter-7/Screenshot_2020-12-04_at_22.27.53.png" loading="lazy"></p><p>We ignore the socat error as we will be using the DNS API method to verify ownership.</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Get our super secret global credentials for the Cloudflare API</span></span><br><span class="line"><span class="comment"># If you need to, you can force generation using the --force flag</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">CF_Key</span>=f78ab58gfd89g87f9h32g3f1235ab</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">CF_Email</span>=your.email@gmail.com</span><br><span class="line">./acme.sh --issue --dns dns_cf -d <span class="string">&quot;vcenter.rylander.io&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/2020/12/05/install-lets-encrypt-acme-sh-on-vcenter-7/Screenshot_2020-12-04_at_22.37.58.png" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Straight from the official webpage: &lt;a href=&quot;https://github.com/acmesh-official/acme.sh&quot;&gt;https://github.com/acmesh-official/acme.sh&lt;/a&gt;&lt;/
      
    
    </summary>
    
    
      <category term="esxi" scheme="https://blog.rylander.io/tags/esxi/"/>
    
      <category term="vmware" scheme="https://blog.rylander.io/tags/vmware/"/>
    
      <category term="letsencrypt" scheme="https://blog.rylander.io/tags/letsencrypt/"/>
    
      <category term="vcenter" scheme="https://blog.rylander.io/tags/vcenter/"/>
    
  </entry>
  
  <entry>
    <title>Passthrough USB Keyboard and Mouse to VM Using ESXi V7</title>
    <link href="https://blog.rylander.io/2020/06/26/Passthrough-USB-Keyboard-and-Mouse-to-VM-using-ESXi-V7/"/>
    <id>https://blog.rylander.io/2020/06/26/Passthrough-USB-Keyboard-and-Mouse-to-VM-using-ESXi-V7/</id>
    <published>2020-06-26T20:00:00.000Z</published>
    <updated>2020-06-26T20:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>I finally caved and setup a proper computer for the younger kids. Apparently the draw av Roblox and Minecraft Mods was too strong in addition to Steam titles.</p><p>I did however set it up as a VM on a an ESXi host, with a dedicated GPU in passthrough. What really got me stomped was passing the keyboard and mouse since my computer only had one USB controller, and I’m booting the ESXi using a USB stick.</p><p>There is a way to passthrough the HID devices without taking the entire PCI device as detailed <a href="https://www.virtuallyghetto.com/2020/05/how-to-passthrough-usb-keyboard-mouse-hid-and-ccid-devices-to-vm-in-esxi.html">here</a></p><p>First find the device-ids!</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">lsusb</span> -v | grep -E &#x27;(^Bus|HID)&#x27;</span><br><span class="line"></span><br><span class="line"><span class="attribute">Bus</span> <span class="number">001</span> Device <span class="number">001</span>: ID <span class="number">0</span>e<span class="number">0</span>f:<span class="number">8002</span> VMware, Inc. Root Hub</span><br><span class="line"><span class="attribute">Bus</span> <span class="number">002</span> Device <span class="number">001</span>: ID <span class="number">0</span>e<span class="number">0</span>f:<span class="number">8002</span> VMware, Inc. Root Hub</span><br><span class="line"><span class="attribute">Bus</span> <span class="number">003</span> Device <span class="number">001</span>: ID <span class="number">0</span>e<span class="number">0</span>f:<span class="number">8001</span> VMware, Inc. Root Hub</span><br><span class="line"><span class="attribute">Bus</span> <span class="number">001</span> Device <span class="number">002</span>: ID <span class="number">8087</span>:<span class="number">0024</span> Intel Corp. Integrated Rate Matching Hub</span><br><span class="line"><span class="attribute">Bus</span> <span class="number">002</span> Device <span class="number">002</span>: ID <span class="number">8087</span>:<span class="number">0024</span> Intel Corp. Integrated Rate Matching Hub</span><br><span class="line"><span class="attribute">Bus</span> <span class="number">001</span> Device <span class="number">003</span>: ID <span class="number">0781</span>:<span class="number">5583</span> SanDisk Corp. Ultra Fit</span><br><span class="line"><span class="attribute">Bus</span> <span class="number">002</span> Device <span class="number">003</span>: ID <span class="number">0424</span>:<span class="number">2660</span> Standard Microsystems Corp. Hub</span><br><span class="line"><span class="attribute">Bus</span> <span class="number">002</span> Device <span class="number">004</span>: ID <span class="number">05</span>ac:<span class="number">911</span>c Apple, Inc. Hub in A<span class="number">1082</span><span class="meta"> [Cinema HD Display 23&quot;]</span></span><br><span class="line"><span class="attribute">Bus</span> <span class="number">002</span> Device <span class="number">006</span>: ID <span class="number">05</span>ac:<span class="number">921</span>c Apple, Inc. A<span class="number">1082</span><span class="meta"> [Cinema HD Display 23&quot;]</span></span><br><span class="line">        <span class="attribute">HID</span> Device Descriptor:</span><br><span class="line">          <span class="attribute">bcdHID</span>               <span class="number">1</span>.<span class="number">11</span></span><br><span class="line"><span class="attribute">Bus</span> <span class="number">002</span> Device <span class="number">007</span>: ID <span class="number">1532</span>:<span class="number">0204</span> Razer USA, Ltd</span><br><span class="line">        <span class="attribute">HID</span> Device Descriptor:</span><br><span class="line">          <span class="attribute">bcdHID</span>               <span class="number">1</span>.<span class="number">11</span></span><br><span class="line">        <span class="attribute">HID</span> Device Descriptor:</span><br><span class="line">          <span class="attribute">bcdHID</span>               <span class="number">1</span>.<span class="number">11</span></span><br><span class="line">        <span class="attribute">HID</span> Device Descriptor:</span><br><span class="line">          <span class="attribute">bcdHID</span>               <span class="number">1</span>.<span class="number">11</span></span><br></pre></td></tr></table></figure><p>These are the ones I’m after:</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Razer</span> Keyboard</span><br><span class="line"><span class="attribute">1532</span>:<span class="number">0204</span> Razer USA</span><br><span class="line"></span><br><span class="line"><span class="attribute">Lenovo</span> Mouse</span><br><span class="line"><span class="attribute">17ef</span>:<span class="number">608</span>d</span><br></pre></td></tr></table></figure><p>You will need to add two parameter types to the VMX file in addition to passing special parameters as ESXi startup paramters.</p><p>Add the follwing to your VMX file (or via GUI VM Advanced Settings).</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">usb.generic.allowHID = &quot;TRUE&quot;</span><br><span class="line">usb.quirks.device0 = &quot;0x1532:0x0204 allow&quot;</span><br><span class="line">usb.quirks.device1 = &quot;0x17ef:0x608d allow&quot;</span><br></pre></td></tr></table></figure><p>The next step is to have the ESXi to not hide the devices.<br>Add the follwing to your ESXi <strong>/etc/vmware/config</strong> file.</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">usb.quirks.device0 = &quot;0x1532:0x0204 allow&quot;</span><br><span class="line">usb.quirks.device1 = &quot;0x17ef:0x608d allow&quot;</span><br></pre></td></tr></table></figure><p>And lastly add an exception for the <strong>keyboard</strong> device during ESXi boot. Either as an option or directly to the boot config file (in my case on my USB stick).<br>Add this to the <strong>/bootbank/boot.cfg</strong> file.</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">kernelopt=autoPartition=FALSE CONFIG./USB/quirks=0x1532:0x0204::0xffff:UQ_KBD_IGNORE</span><br></pre></td></tr></table></figure><img src="/2020/06/26/Passthrough-USB-Keyboard-and-Mouse-to-VM-using-ESXi-V7/Screenshot_2020-12-28_at_13.24.54.png" class="">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I finally caved and setup a proper computer for the younger kids. Apparently the draw av Roblox and Minecraft Mods was too strong in addi
      
    
    </summary>
    
    
      <category term="esxi" scheme="https://blog.rylander.io/tags/esxi/"/>
    
      <category term="vmware" scheme="https://blog.rylander.io/tags/vmware/"/>
    
  </entry>
  
  <entry>
    <title>Add Let&#39;s Encrypt Certificate to vCenter 7</title>
    <link href="https://blog.rylander.io/2020/04/28/add-lets-encrypt-certificate-to-vcenter-7/"/>
    <id>https://blog.rylander.io/2020/04/28/add-lets-encrypt-certificate-to-vcenter-7/</id>
    <published>2020-04-28T18:52:09.000Z</published>
    <updated>2020-12-05T19:52:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve updated with an automated process as described in <a href="/2020/12/05/install-lets-encrypt-acme-sh-on-vcenter-7/" title="Install Lets Encrypt acme.sh on vCenter 7">Install Lets Encrypt acme.sh on vCenter 7</a></p><p>It seems the new vCenter 7 is rather picky. What worked on the 6.7 results in the dreaded error “Error occurred while fetching tls: Exception found (the trustAnchors parameter must be non-empty)”.</p><p>The fullchain.cer file produced by Let’s Encrypt needs to replaced with the proper certificate chain.<br>My chain looks like this<br>-&gt;Let’s Encrypt Authority X3 (IdenTrust cross-signed)<br>–&gt;DST Root CA X3</p><img src="/2020/04/28/add-lets-encrypt-certificate-to-vcenter-7/chainoftrust.png" class=""><p>Create a new fullchain.cer by downloading the corresponding certificates.</p><p>Intermediate Certificates<br>Let’s Encrypt Authority X3 (IdenTrust cross-signed)<br><a href="https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem.txt">https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem.txt</a></p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">-----<span class="keyword">BEGIN</span> CERTIFICATE-----</span><br><span class="line">MIIEkjCCA3qgAwIBAgIQCgFBQgAAAVOFc2oLheynCDANBgkqhkiG9w0BAQsFADA/</span><br><span class="line">MSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMT</span><br><span class="line">DkRTVCBSb290IENBIFgzMB4XDTE2MDMxNzE2NDA0NloXDTIxMDMxNzE2NDA0Nlow</span><br><span class="line">SjELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUxldCdzIEVuY3J5cHQxIzAhBgNVBAMT</span><br><span class="line">GkxldCdzIEVuY3J5cHQgQXV0aG9yaXR5IFgzMIIBIjANBgkqhkiG9w0BAQEFAAOC</span><br><span class="line">AQ8AMIIBCgKCAQEAnNMM8FrlLke3cl03g7NoYzDq1zUmGSXhvb418XCSL7e4S0EF</span><br><span class="line">q6meNQhY7LEqxGiHC6PjdeTm86dicbp5gWAf15Gan<span class="regexp">/PQeGdxyGkOlZHP/u</span>aZ6WA8</span><br><span class="line">SMx+yk13EiSdRxta67nsHjcAHJyse6cF6s5K671B5TaYucv9bTyWaN8jKkKQDIZ0</span><br><span class="line">Z8h/pZq4UmEUEz9l6YKHy9v6Dlb2honzhT+Xhq+w3Brvaw2VFn3EK6BlspkENnWA</span><br><span class="line">a6xK8xuQSXgvopZPKiAlKQTGdMDQMc2PMTiVFrqoM7hD8bEfwzB/onkxEz0tNvjj</span><br><span class="line">/PIzark5McWvxI0NHWQWM6r6hCm21AvA2H3DkwIDAQABo4IBfTCCAXkwEgYDVR0T</span><br><span class="line">AQH<span class="regexp">/BAgwBgEB/</span>wIBADAOBgNVHQ8BAf8EBAMCAYYwfwYIKwYBBQUHAQEEczBxMDIG</span><br><span class="line">CCsGAQUFBzABhiZodHRwOi8vaXNyZy50cnVzdGlkLm9jc3AuaWRlbnRydXN0LmNv</span><br><span class="line">bTA7BggrBgEFBQcwAoYvaHR0cDovL2FwcHMuaWRlbnRydXN0LmNvbS9yb290cy9k</span><br><span class="line">c3Ryb290Y2F4My5wN2MwHwYDVR0jBBgwFoAUxKexpHsscfrb4UuQdf/EFWCFiRAw</span><br><span class="line">VAYDVR0gBE0wSzAIBgZngQwBAgEwPwYLKwYBBAGC3xMBAQEwMDAuBggrBgEFBQcC</span><br><span class="line">ARYiaHR0cDovL2Nwcy5yb290LXgxLmxldHNlbmNyeXB0Lm9yZzA8BgNVHR8ENTAz</span><br><span class="line">MDGgL6AthitodHRwOi8vY3JsLmlkZW50cnVzdC5jb20vRFNUUk9PVENBWDNDUkwu</span><br><span class="line">Y3JsMB0GA1UdDgQWBBSoSmpjBH3duubRObemRWXv86jsoTANBgkqhkiG9w0BAQsF</span><br><span class="line">AAOCAQEA3TPXEfNjWDjdGBX7CVW+dla5cEilaUcne8IkCJLxWh9KEik3JHRRHGJo</span><br><span class="line">uM2VcGfl96S8TihRzZvoroed6ti6WqEBmtzw3Wodatg+VyOeph4EYpr<span class="regexp">/1wXKtx8/</span></span><br><span class="line">wApIvJSwtmVi4MFU5aMqrSDE6ea73Mj2tcMyo5jMd6jmeWUHK8so/joWUoHOUgwu</span><br><span class="line">X4Po1QYz+<span class="number">3</span>dszkDqMp4fklxBwXRsW10KXzPMTZ+sOPAveyxindmjkW8lGy+QsRlG</span><br><span class="line">PfZ+G6Z6h7mjem0Y+iWlkYcV4PIWL1iwBi8saCbGS5jN2p8M+X+Q7UNKEkROb3N6</span><br><span class="line">KOqkqm57TH2H3eDJAkSnh6/DNFu0Qg==</span><br><span class="line">-----<span class="keyword">END</span> CERTIFICATE-----</span><br></pre></td></tr></table></figure><p>DST Root CA X3<br><a href="https://www.identrust.com/dst-root-ca-x3">https://www.identrust.com/dst-root-ca-x3</a></p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">-----<span class="keyword">BEGIN</span> CERTIFICATE-----</span><br><span class="line">MIIDSjCCAjKgAwIBAgIQRK+wgNajJ7qJMDmGLvhAazANBgkqhkiG9w0BAQUFADA/</span><br><span class="line">MSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMT</span><br><span class="line">DkRTVCBSb290IENBIFgzMB4XDTAwMDkzMDIxMTIxOVoXDTIxMDkzMDE0MDExNVow</span><br><span class="line">PzEkMCIGA1UEChMbRGlnaXRhbCBTaWduYXR1cmUgVHJ1c3QgQ28uMRcwFQYDVQQD</span><br><span class="line">Ew5EU1QgUm9vdCBDQSBYMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB</span><br><span class="line">AN+v6ZdQCINXtMxiZfaQguzH0yxrMMpb7NnDfcdAwRgUi+DoM3ZJKuM/IUmTrE4O</span><br><span class="line">rz5Iy2Xu/NMhD2XSKtkyj4zl93ewEnu1lcCJo6m67XMuegwGMoOifooUMM0RoOEq</span><br><span class="line">OLl5CjH9UL2AZd+<span class="number">3</span>UWODyOKIYepLYYHsUmu5ouJLGiifSKOeDNoJjj4XLh7dIN9b</span><br><span class="line">xiqKqy69cK3FCxolkHRyxXtqqzTWMIn<span class="regexp">/5WgTe1QLyNau7Fqckh49ZLOMxt+/y</span>UFw</span><br><span class="line"><span class="number">7</span>BZy1SbsOFU5Q9D8/RhcQPGX69Wam40dutolucbY38EVAjqr2m7xPi71XAicPNaD</span><br><span class="line">aeQQmxkqtilX4+U9m5<span class="regexp">/wAl0CAwEAAaNCMEAwDwYDVR0TAQH/</span>BAUwAwEB/zAOBgNV</span><br><span class="line">HQ8BAf8EBAMCAQYwHQYDVR0OBBYEFMSnsaR7LHH62+FLkHX/xBVghYkQMA0GCSqG</span><br><span class="line">SIb3DQEBBQUAA4IBAQCjGiybFwBcqR7uKGY3Or+Dxz9LwwmglSBd49lZRNI+DT69</span><br><span class="line">ikugdB/OEIKcdBodfpga3csTS7MgROSR6cz8faXbauX+<span class="number">5</span>v3gTt23ADq1cEmv8uXr</span><br><span class="line">AvHRAosZy5Q6XkjEGB5YGV8eAlrwDPGxrancWYaLbumR9YbK+rlmM6pZW87ipxZz</span><br><span class="line">R8srzJmwN0jP41ZL9c8PDHIyh8bwRLtTcm1D9SZImlJnt1ir/md2cXjbDaJWFBM5</span><br><span class="line">JDGFoqgCWjBH4d1QB7wCCZAA62RjYJsWvIjJEubSfZGL+T0yjWW06XyxV3bqxbYo</span><br><span class="line">Ob8VZRzI9neWagqNdwvYkQsEjgfbKbYK7p2CNTUQ</span><br><span class="line">-----<span class="keyword">END</span> CERTIFICATE-----</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I’ve updated with an automated process as described in &lt;a href=&quot;/2020/12/05/install-lets-encrypt-acme-sh-on-vcenter-7/&quot; title=&quot;Install Le
      
    
    </summary>
    
    
      <category term="esxi" scheme="https://blog.rylander.io/tags/esxi/"/>
    
      <category term="vmware" scheme="https://blog.rylander.io/tags/vmware/"/>
    
  </entry>
  
  <entry>
    <title>LetsEncrypt Certificate for HP M277dw</title>
    <link href="https://blog.rylander.io/2020/01/17/letsencrypt-certificate-for-hp-m277dw/"/>
    <id>https://blog.rylander.io/2020/01/17/letsencrypt-certificate-for-hp-m277dw/</id>
    <published>2020-01-17T07:41:52.000Z</published>
    <updated>2020-01-17T07:41:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>Remember to keep it updated or you will break AirPrint functionality with an invalid certificate.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl pkcs12 -<span class="built_in">export</span> -out hpm277dw.pfx -inkey rylander.io.key -<span class="keyword">in</span> rylander.io.cer</span><br><span class="line">Enter Export Password:</span><br><span class="line">Verifying - Enter Export Password:</span><br></pre></td></tr></table></figure><p>shell script, set it to executable and remember to set a password</p><p>create_pfx.sh</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">openssl pkcs12 -<span class="built_in">export</span> -out hpm277dw.pfx -inkey rylander.io.key -<span class="keyword">in</span> rylander.io.cer</span><br></pre></td></tr></table></figure><p><img src="/2020/01/17/letsencrypt-certificate-for-hp-m277dw/Screenshot_2020-01-17_at_22.49.18.png" loading="lazy"></p><p><img src="/2020/01/17/letsencrypt-certificate-for-hp-m277dw/Screenshot_2020-01-17_at_22.50.38.png" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Remember to keep it updated or you will break AirPrint functionality with an invalid certificate.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;tab
      
    
    </summary>
    
    
      <category term="letsencrypt" scheme="https://blog.rylander.io/tags/letsencrypt/"/>
    
  </entry>
  
  <entry>
    <title>Setup Cloudflare Access</title>
    <link href="https://blog.rylander.io/2018/08/03/setup-cloudflare-access/"/>
    <id>https://blog.rylander.io/2018/08/03/setup-cloudflare-access/</id>
    <published>2018-08-03T18:55:32.000Z</published>
    <updated>2018-08-03T18:55:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>So this is a neat feature where I can expose web services externally, but hidden and protected by Cloudflare. I’m thinking I want to expose my Evernote replacement Bookstack/Confluence (still not decided yet on which). This is where I keep information which contain confidential stuff like passwords and like. Previously I’ve kept those in Evernote, but I want to move away from that platform to something more open or atleast something which keep evolving.</p><p>So I’m hosting both an Atlassian Confluence instance as well as a Bookstack instance. In this writeup, I’m exposing my Bookstack via Cloudflare Access.</p><p>I’m securing my local origin using ip-restrictions from Cloudflare to only port-forward requests originating from Cloudflare CDN. These requests hits my Traefik reverse proxy which forward the traffic to whatever Docker instance is serving Bookstack.</p><img src="/2018/08/03/setup-cloudflare-access/238b904a-3b2c-413c-aad4-85a62a7e72b3.png" class=""><h2 id="Setup-Cloudflare-Access"><a href="#Setup-Cloudflare-Access" class="headerlink" title="Setup Cloudflare Access"></a>Setup Cloudflare Access</h2><img src="/2018/08/03/setup-cloudflare-access/setup-cloudflare-access.png" class=""><p>This is basically the public login URL that hosts the options for authenticating the user. I consider this my base IDP thus the name. This page will display whatever authentication options available whenever the user hits one of my protected sites.</p><img src="/2018/08/03/setup-cloudflare-access/f6d2af3f-95a7-4399-ad3d-1ea415c67ad6.png" class=""><h2 id="Setting-up-GitHub-OAuth-flow"><a href="#Setting-up-GitHub-OAuth-flow" class="headerlink" title="Setting up GitHub OAuth flow"></a>Setting up GitHub OAuth flow</h2><p>I’m using the GitHub OAuth provider to protect access to my sites. I setup the consent in GitHub like this.</p><img src="/2018/08/03/setup-cloudflare-access/setting-up-github-oauth-flow.png" class=""><h2 id="OAuth-keys"><a href="#OAuth-keys" class="headerlink" title="OAuth keys"></a>OAuth keys</h2><p>These OAuth keys need to be copied to the Cloudflare integration settings with GitHub.</p><img src="/2018/08/03/setup-cloudflare-access/oauth-keys.png" class=""><h2 id="Adding-GitHub-as-identity-provider-to-Cloudflare"><a href="#Adding-GitHub-as-identity-provider-to-Cloudflare" class="headerlink" title="Adding GitHub as identity provider to Cloudflare"></a>Adding GitHub as identity provider to Cloudflare</h2><p>The keys from GitHub are provided here.</p><img src="/2018/08/03/setup-cloudflare-access/adding-github-as-identity-provider-to-cloudflare.png" class=""><img src="/2018/08/03/setup-cloudflare-access/6326ca0c-e73a-4e23-9394-16db249b9a36.png" class=""><h2 id="In-action"><a href="#In-action" class="headerlink" title="In action"></a>In action</h2><p>When I don’t have a valid session, I’m prompted to authenticate with whatever identity provider I’ve configured, in this case GitHub only.</p><img src="/2018/08/03/setup-cloudflare-access/in-action.png" class=""><p>Provide valid credentials for any GitHub account</p><img src="/2018/08/03/setup-cloudflare-access/ecb711de-5e2b-483e-944c-996c7cc05756.png" class=""><h2 id="Authorization-policies"><a href="#Authorization-policies" class="headerlink" title="Authorization policies"></a>Authorization policies</h2><p>Create authorization policies to control who can access depending on given valid authentication. In this case, you need to be a member of the “emryl” organization to be authorized.</p><img src="/2018/08/03/setup-cloudflare-access/authorization-policies.png" class=""><h2 id="Message-when-not-being-authorized"><a href="#Message-when-not-being-authorized" class="headerlink" title="Message when not being authorized"></a>Message when not being authorized</h2><img src="/2018/08/03/setup-cloudflare-access/message-when-not-being-authorized.png" class="">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;So this is a neat feature where I can expose web services externally, but hidden and protected by Cloudflare. I’m thinking I want to expo
      
    
    </summary>
    
    
      <category term="cloudflare" scheme="https://blog.rylander.io/tags/cloudflare/"/>
    
      <category term="github" scheme="https://blog.rylander.io/tags/github/"/>
    
      <category term="oauth" scheme="https://blog.rylander.io/tags/oauth/"/>
    
  </entry>
  
  <entry>
    <title>Using GitHub Pages as Web Host and Cloudflare as CDN</title>
    <link href="https://blog.rylander.io/2018/08/03/using-github-pages-as-web-host-and-cloudflare-as-cdn/"/>
    <id>https://blog.rylander.io/2018/08/03/using-github-pages-as-web-host-and-cloudflare-as-cdn/</id>
    <published>2018-08-03T18:15:14.000Z</published>
    <updated>2018-08-03T18:15:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>So it is that time of the year to move to a new free web hosting provider. Actually I had to switch to TLS enabled backends due to setting up Cloudflares Access and thus securing all access to my origin servers. For some reason, my current provider AWS doesn’t support TLS on their free static web hosting using Buckets, so I’ve decided to place my blog on Github Pages instead. </p><img src="/2018/08/03/using-github-pages-as-web-host-and-cloudflare-as-cdn/662949ef-1d9a-4b56-bc56-5e26c9936cf1.png" class=""><h2 id="Configure-Hexo"><a href="#Configure-Hexo" class="headerlink" title="Configure Hexo"></a>Configure Hexo</h2><p>I use the static web framework Hexo, which I can configure to deploy directly to a git repository. I currently have a Continous Delivery flow setup using Wercker, but you can also deploy directly using Hexo.</p><p>I’ve updated my _config.yml file to switch away from S3 buckets on AWS to a Github repository. Since Github pages is set to monitor the “master” branch, I’ve defined it here as well as the user. In this scenario I’m relying on my private SSH key to authorize the git push, but you can setup whatever mechanism which suits your workflow best.</p><p>To publish, I need to issue a “hexo deploy” in my local publishing environment.</p><img src="/2018/08/03/using-github-pages-as-web-host-and-cloudflare-as-cdn/configure-hexo.png" class=""><h2 id="Configuring-GitHub-Pages"><a href="#Configuring-GitHub-Pages" class="headerlink" title="Configuring GitHub Pages"></a>Configuring GitHub Pages</h2><p>I’ve created a public repository in my organization. Since I will be using a custom domain on GitHub Pages, it doesn’t really matter what its called. In my case, I’ve named in “Blog”. Once I’ve pushed my first commit to the “master” branch, I can enable GitHub Pages in the Settings dialog for the repository. I’ve also defined the custom domain name, which relies on my DNS entry for “blog.rylander.io”.</p><p>This is actually a multi-step process as it takes time to enable custom domains and I want to enable HTTPS but eventually it can be setup like this. The last step is to enable “Enforce HTTPS”.</p><img src="/2018/08/03/using-github-pages-as-web-host-and-cloudflare-as-cdn/configuring-github-pages.png" class=""><h2 id="CNAME-entry"><a href="#CNAME-entry" class="headerlink" title="CNAME entry"></a>CNAME entry</h2><p>When enabling the Custom domain option in the settings for the repository, actually creates a CNAME file with the custom domain specified within it. This file is placed in the root of the repository.</p><p>This entry is used to setup the reverse proxy correctly at GitHub to serve the correct content.</p><img src="/2018/08/03/using-github-pages-as-web-host-and-cloudflare-as-cdn/cname-entry.png" class=""><h2 id="Add-Hexo-CNAME-plugin"><a href="#Add-Hexo-CNAME-plugin" class="headerlink" title="Add Hexo CNAME plugin"></a>Add Hexo CNAME plugin</h2><p>In order to automatically have Hexo persist the required CNAME file for GitHub Pages custom domain to work, you need to install a plugin. It will read your Hexo configuration and use your “url” setting to create the CNAME entry.</p><p>Install the plugin:</p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-cname <span class="comment">--save</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>This will generate the CNAME file in your output folder.</p><img src="/2018/08/03/using-github-pages-as-web-host-and-cloudflare-as-cdn/add-hexo-cname-plugin.png" class=""><h2 id="Configure-CloudFlare"><a href="#Configure-CloudFlare" class="headerlink" title="Configure CloudFlare"></a>Configure CloudFlare</h2><p>The only change I did in my DNS settings at CloudFlare was to repoint my CNAME entry to emryl.github.io. </p><p>The HTTPS handshake for the rylander.io domain is handled by CloudFlare, I do not need to place a custom certificate on GitHub. This means I can only use the “Full” setting, but not the “Strict” setting for the Downstream connections back to the Origin servers.</p><img src="/2018/08/03/using-github-pages-as-web-host-and-cloudflare-as-cdn/configure-cloudflare.png" class="">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;So it is that time of the year to move to a new free web hosting provider. Actually I had to switch to TLS enabled backends due to settin
      
    
    </summary>
    
    
      <category term="web" scheme="https://blog.rylander.io/tags/web/"/>
    
      <category term="hexo" scheme="https://blog.rylander.io/tags/hexo/"/>
    
      <category term="github" scheme="https://blog.rylander.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Install Windows Admin Center on Windows Server 2016 Core</title>
    <link href="https://blog.rylander.io/2018/07/28/install-windows-admin-center-on-windows-server-2016-core/"/>
    <id>https://blog.rylander.io/2018/07/28/install-windows-admin-center-on-windows-server-2016-core/</id>
    <published>2018-07-28T10:19:36.000Z</published>
    <updated>2018-07-28T10:19:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>Windows Admin Center (WAC) is a free browser-based Microsoft Server Management tool released in April 2018. Use it for managing Windows Server 2016, Windows Server 2012, and Windows 10. Additionally, it can manage Hyper-V Server, Azure VMs, Azure Backup, highly-converged infrastructures (HCI), and more.</p><p>Sounds aweseome! The caveat is that it is an initial release and will not replace existing tooling for a long time.</p><p>I will use a pre-installed LetsEncrypt certificate</p><p><a href="https://docs.microsoft.com/en-us/windows-server/manage/windows-admin-center/deploy/install#install-on-server-core">https://docs.microsoft.com/en-us/windows-server/manage/windows-admin-center/deploy/install#install-on-server-core</a></p><img src="/2018/07/28/install-windows-admin-center-on-windows-server-2016-core/76faea3f-0cac-4ad4-be02-62db289a26df.jpg" class=""><h2 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h2><p>Choose either the GA version or the bleeding-edge Windows Insider version.</p><img src="/2018/07/28/install-windows-admin-center-on-windows-server-2016-core/download.png" class=""><h2 id="Windows-Insider"><a href="#Windows-Insider" class="headerlink" title="Windows Insider"></a>Windows Insider</h2><p>This is the less tested, likely to break version.</p><img src="/2018/07/28/install-windows-admin-center-on-windows-server-2016-core/windows-insider.png" class=""><h2 id="Prepping-before-installation"><a href="#Prepping-before-installation" class="headerlink" title="Prepping before installation"></a>Prepping before installation</h2><h3 id="Getting-the-installation-files-onto-the-Core-instance"><a href="#Getting-the-installation-files-onto-the-Core-instance" class="headerlink" title="Getting the installation files onto the Core instance"></a>Getting the installation files onto the Core instance</h3><p>I mapped a network share and copied the files to the local host (/persistent is optional). Apparently the tried and true net use command still lives on.</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;net use x: \\<span class="number">10.0</span><span class="number">.1</span><span class="number">.21</span>\cloudStorage /persistent:yes /<span class="keyword">user</span>:admlocal</span><br><span class="line">The <span class="keyword">password</span> <span class="keyword">or</span> <span class="keyword">user</span> <span class="type">name</span> <span class="keyword">is</span> invalid <span class="keyword">for</span> \\<span class="number">10.0</span><span class="number">.1</span><span class="number">.21</span>\cloudStorage.</span><br><span class="line">Enter the <span class="keyword">password</span> <span class="keyword">for</span> <span class="string">&#x27;admlocal&#x27;</span> <span class="keyword">to</span> <span class="keyword">connect</span> <span class="keyword">to</span> <span class="string">&#x27;10.0.1.21&#x27;</span>:</span><br><span class="line">The command completed successfully.</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><img src="/2018/07/28/install-windows-admin-center-on-windows-server-2016-core/getting-the-installation-files-onto-the-core-instance.png" class=""><h3 id="Installing-a-LetsEncrypt-certificate"><a href="#Installing-a-LetsEncrypt-certificate" class="headerlink" title="Installing a LetsEncrypt certificate"></a>Installing a LetsEncrypt certificate</h3><p>Since the self-generated certificate is set to expiry after 90 days, I opted for a LetsEncrypt certificate from the start. I will implement an automated process using acme.sh later on.</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="variable">$credential</span> = Get-Credential -UserName <span class="string">&#x27;Enter password below&#x27;</span> -Message <span class="string">&#x27;Enter password below&#x27;</span></span><br><span class="line">Import-PfxCertificate -FilePath c:\temp\rylander<span class="selector-class">.io</span><span class="selector-class">.pfx</span> -CertStoreLocation Cert:\LocalMachine\My -Password <span class="variable">$credential</span>.Password</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>The thumbprint will be displayed after installation, which is used during the installation of the Windows Admin Center.</p><img src="/2018/07/28/install-windows-admin-center-on-windows-server-2016-core/installing-a-letsencrypt-certificate.png" class=""><h2 id="Installation-syntax-for-Windows-Admin-Center"><a href="#Installation-syntax-for-Windows-Admin-Center" class="headerlink" title="Installation syntax for Windows Admin Center"></a>Installation syntax for Windows Admin Center</h2><p>The /qn switch makes this a Silent one. </p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">msiexec /i &lt;WindowsAdminCenterInstallerName&gt;.msi /qn /L*v log.txt <span class="attribute">SME_PORT</span>=&lt;port&gt; <span class="attribute">SME_THUMBPRINT</span>=&lt;thumbprint&gt; <span class="attribute">SSL_CERTIFICATE_OPTION</span>=installed</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>To install using the generated (90 days expiry certificate)</p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">msiexec /i &lt;WindowsAdminCenterInstallerName&gt;<span class="variable">.msi</span> /qn /L*v log<span class="variable">.txt</span> SME_PORT=&lt;port&gt; SSL_CERTIFICATE_OPTION=<span class="keyword">generate</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="Installing-the-Windows-Admin-Center-using-a-pre-installed-LetsEncrypt-certificate"><a href="#Installing-the-Windows-Admin-Center-using-a-pre-installed-LetsEncrypt-certificate" class="headerlink" title="Installing the Windows Admin Center using a pre-installed LetsEncrypt certificate"></a>Installing the Windows Admin Center using a pre-installed LetsEncrypt certificate</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">msiexec</span> /i WindowsAdminCenterPreview<span class="number">1807</span>.msi /qn /L*v log.txt SME_PORT=<span class="number">443</span> SME_THUMBPRINT=<span class="number">39</span>CE<span class="number">96624</span>BE<span class="number">31</span>A<span class="number">06</span>A<span class="number">411006564</span>C<span class="number">0</span>D<span class="number">63</span>D<span class="number">860</span>D<span class="number">688</span>D SSL_CERTIFICATE_OPTION=installed</span><br><span class="line"> </span><br></pre></td></tr></table></figure><img src="/2018/07/28/install-windows-admin-center-on-windows-server-2016-core/installing-the-windows-admin-center-using-a-pre-installed-letsencrypt-certificate.png" class=""><h2 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h2><img src="/2018/07/28/install-windows-admin-center-on-windows-server-2016-core/login.png" class=""><h2 id="The-managed-resource-connections"><a href="#The-managed-resource-connections" class="headerlink" title="The managed resource connections"></a>The managed resource connections</h2><img src="/2018/07/28/install-windows-admin-center-on-windows-server-2016-core/the-managed-resource-connections.png" class=""><h2 id="The-Web-View"><a href="#The-Web-View" class="headerlink" title="The Web View"></a>The Web View</h2><img src="/2018/07/28/install-windows-admin-center-on-windows-server-2016-core/the-web-view.png" class=""><h2 id="Manage-Roles-amp-Features"><a href="#Manage-Roles-amp-Features" class="headerlink" title="Manage Roles &amp; Features"></a>Manage Roles &amp; Features</h2><img src="/2018/07/28/install-windows-admin-center-on-windows-server-2016-core/manage-roles--amp--features.png" class="">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Windows Admin Center (WAC) is a free browser-based Microsoft Server Management tool released in April 2018. Use it for managing Windows S
      
    
    </summary>
    
    
      <category term="sysop" scheme="https://blog.rylander.io/tags/sysop/"/>
    
      <category term="windows" scheme="https://blog.rylander.io/tags/windows/"/>
    
      <category term="windows_core" scheme="https://blog.rylander.io/tags/windows-core/"/>
    
  </entry>
  
  <entry>
    <title>Local HTTPS Dev Proxy Using Lets Encrypt and Cloudflare</title>
    <link href="https://blog.rylander.io/2018/07/21/local-https-dev-proxy-using-lets-encrypt-and-cloudflare/"/>
    <id>https://blog.rylander.io/2018/07/21/local-https-dev-proxy-using-lets-encrypt-and-cloudflare/</id>
    <published>2018-07-21T08:05:15.000Z</published>
    <updated>2018-07-21T08:05:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>As a first step of switching over to a DNS based process for maintaining Lets Encrypt certificates, I opted to start with upgrading my local environment as I do some tinkering with Kubernetes and thus end up with quite dynamic endpoint urls. The primary reason though is to enable wildcard certificates as Lets Encrypt only support these using the DNS method.</p><img src="/2018/07/21/local-https-dev-proxy-using-lets-encrypt-and-cloudflare/b8fd7d88-5173-425f-8a2b-d9e08c03e89d.png" class=""><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>As I currently do some Kubernetes based labs, I’ve also looked into the Traefik reverse proxy. The most obvious options are otherwise nginx and HAProxy, as demonstrated in my previous setup based on nginx, but Traefik belong to a new breed of easy to use and MSA oriented components. Compared to the aforementioned options, Traefik is still young and does lack production history as well as the best-of-breed performance figures.</p><p>So back to Lets Encrypt certificates. This setup is designed to run as a local Docker container, proxying all HTTP/s requests to other services, be them Dockerized or not. An integration to my DNS provider is setup to add appropriate DNS records for each new unique host name which Lets Encrypt uses to validate my domain ownership. Thus I avoid having to expose an external facing web host just to create local certificates. I will though setup a proper externally facing reverse proxy, however that is on my backlog for now. </p><p>So the moving parts in this setup is the actual Docker container containing Traefik, configuration of my DNS provider (Cloudflare), configuration of my local DNS (Windows Server), and some settings in the local configuration file for Traefik. You will need an existing account with LetsEncrypt of course.</p><p>I’m using the base Docker setup by SIL International and forked into my own repository <a href="(https://github.com/mry/traefik-https-proxy).">(https://github.com/mry/traefik-https-proxy).</a></p><h2 id="GitHub-project"><a href="#GitHub-project" class="headerlink" title="GitHub project"></a>GitHub project</h2><p>I’ve create a quickstart project on GitHub which provides a docker-compose.yml file and a sample configuration file. Clone to a local directory and it can be run as is, after properly configuring the local settings.</p><p>I’ve created and published a public image at Docker Hub <a href="(https://hub.docker.com/r/emryl/traefik-localdev-proxy/)">(https://hub.docker.com/r/emryl/traefik-localdev-proxy/)</a> which is referenced from the docker-compose file.</p><p>Rename the local.env.example file by dropping the “.example” and fill in the settings.</p><img src="/2018/07/21/local-https-dev-proxy-using-lets-encrypt-and-cloudflare/github-project.png" class=""><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><p>This is a basic docker-compose file, using the published image.</p><p>In the same directory where the docker-compose.yml file exists, type “docker-compose up -d” (-d is for daemon) to start the Traefik instance. It will proxy all HTTPS requests on port 443 to whatever matches according to the local configuration file above. </p><ol><li>Provide your own custom traefik configuration file if you have more advanced needs and uncomment the mapping entry and provide your own Traefik configuration.</li></ol><p>The LetsEncrypt certs and meta data are stored in the local certs folder.</p><img src="/2018/07/21/local-https-dev-proxy-using-lets-encrypt-and-cloudflare/docker-compose.png" class=""><h2 id="Local-env"><a href="#Local-env" class="headerlink" title="Local.env"></a>Local.env</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">TLD <span class="keyword">is</span> your base <span class="keyword">domain</span></span><br><span class="line">SANS <span class="keyword">is</span> your comma separated list <span class="keyword">of</span> hosts</span><br><span class="line">BACKEND#_URL <span class="keyword">is</span> your <span class="type">internal</span> url <span class="keyword">to</span> the backend service <span class="keyword">from</span> the proxy</span><br><span class="line">FRONTEND#_Domain <span class="keyword">is</span> your DNS host <span class="type">name</span> <span class="keyword">to</span> proxy</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>This is the basic template based approach, but you can also use your own custom Traefik configuration, just point to the correct .toml configuration in your docker configuration in the docker-compose file as described above.</p><img src="/2018/07/21/local-https-dev-proxy-using-lets-encrypt-and-cloudflare/localenv.png" class=""><h2 id="DNS-setup-Cloudflare"><a href="#DNS-setup-Cloudflare" class="headerlink" title="DNS setup - Cloudflare"></a>DNS setup - Cloudflare</h2><p>I’m using Cloudflare for my public DNS needs. I do run a split scenario with an internal DNS server as well and I have configured a wildcard entry on both my internal and public DNS.</p><p>I need to configure API access to Cloudflare DNS in order for Traefik being able to dynamically create records for LetsEntrypt to query.</p><p>To do that, go into <em>My Profile - API Keys</em>.</p><p>Copy your global API key and enter it in your local local.env file for parameter CLOUDFLARE_API_KEY</p><img src="/2018/07/21/local-https-dev-proxy-using-lets-encrypt-and-cloudflare/dns-setup---cloudflare.png" class=""><p>Provide all details for accessing Cloudflare</p><img src="/2018/07/21/local-https-dev-proxy-using-lets-encrypt-and-cloudflare/e3059e70-a3e4-4f5b-87fa-dee0108f80a1.png" class=""><p>When properly enabled, Traefik kan control you DNS entries at Cloudflare and thus create temporary records similar to this. These are only to validate with LetsEncrypt that you have control of the domain.</p><img src="/2018/07/21/local-https-dev-proxy-using-lets-encrypt-and-cloudflare/958899af-21a8-4428-baf6-453a9bde0602.png" class=""><h3 id="Configuring-the-DNS-entries"><a href="#Configuring-the-DNS-entries" class="headerlink" title="Configuring the DNS entries"></a>Configuring the DNS entries</h3><p>Chose a hostname to use, in my case I have defined local.rylander.io which points to my localhost endpoint. You could define a wildcard entry as shown above, which would send all non-defined hostnames to whatever ip you have defined.</p><img src="/2018/07/21/local-https-dev-proxy-using-lets-encrypt-and-cloudflare/configuring-the-dns-entries.png" class=""><h2 id="Test-it-out"><a href="#Test-it-out" class="headerlink" title="Test it out"></a>Test it out</h2><p>Navigate to your local url, in my case it is <a href="http://local.rylander.io/">http://local.rylander.io</a> which points to 127.0.0.1. The host-header is translated into the proper backend mapping in Traefik. In this test I’m forwarding to a local Proget instance.</p><img src="/2018/07/21/local-https-dev-proxy-using-lets-encrypt-and-cloudflare/test-it-out.png" class="">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;As a first step of switching over to a DNS based process for maintaining Lets Encrypt certificates, I opted to start with upgrading my lo
      
    
    </summary>
    
    
      <category term="cloudflare" scheme="https://blog.rylander.io/tags/cloudflare/"/>
    
      <category term="letsencrypt" scheme="https://blog.rylander.io/tags/letsencrypt/"/>
    
      <category term="dns" scheme="https://blog.rylander.io/tags/dns/"/>
    
  </entry>
  
  <entry>
    <title>Watching GitHub Repositories</title>
    <link href="https://blog.rylander.io/2018/07/20/watching-github-repositories/"/>
    <id>https://blog.rylander.io/2018/07/20/watching-github-repositories/</id>
    <published>2018-07-20T16:14:09.000Z</published>
    <updated>2018-07-20T16:14:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>I never bother to track changes on any GitHub repositories, but when I do, I use the Github File Watcher service.</p><img src="/2018/07/20/watching-github-repositories/c62545bb-33fa-41df-a16d-e55b8c8c041c.png" class=""><h2 id="Github-File-Watcher"><a href="#Github-File-Watcher" class="headerlink" title="Github File Watcher"></a>Github File Watcher</h2><p>Since I rely on many third party, open source, best effort types of solutions, I need a helper service to help me keep track of updates. One nice service I’ve used for some time now allows me keep track of any changes in a specified GitHub repository/file. When setup, it will send an email with a link back to GitHub for me to check what has changed. The nice feature of this is that I can specify which file I want to use as a trigger.</p><p><a href="https://app.github-file-watcher.com/">https://app.github-file-watcher.com/</a></p><img src="/2018/07/20/watching-github-repositories/github-file-watcher.png" class="">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I never bother to track changes on any GitHub repositories, but when I do, I use the Github File Watcher service.&lt;/p&gt;
&lt;img src=&quot;/2018/07/
      
    
    </summary>
    
    
      <category term="docker" scheme="https://blog.rylander.io/tags/docker/"/>
    
      <category term="github" scheme="https://blog.rylander.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Setup CrashPlan for Small Business Using Docker on a Synology NAS</title>
    <link href="https://blog.rylander.io/2018/07/20/setup-crashplan-for-small-business-using-docker-on-a-synology-nas/"/>
    <id>https://blog.rylander.io/2018/07/20/setup-crashplan-for-small-business-using-docker-on-a-synology-nas/</id>
    <published>2018-07-20T16:05:42.000Z</published>
    <updated>2018-07-20T16:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>Since CrashPlan for Home is about to close down, I had to swith to a new solution. I opted for staying with CrashPlan since it works pretty darn well and I can still run it directly on my NAS. As always, I rely on other peoples work and in this case I’ve chosen the well maintained solution by <a href="https://github.com/jlesage/docker-crashplan-pro">Jocelyn</a> who also maintains other interesting Docker <a href="https://jlesage.github.io/docker-apps/">packages</a>.</p><p>This Dockerized version means running both the server and the client inside the Docker container. This means the installation process is much simpler than when they are split, as in my previous versions. Instead the UI is exposed using VNC and can be used directly from a browser or by connecting a VNC client.</p><p>Whenever the base CrashPlan is updated, I expect Jocelyn to release an updated image for me to install. At least quicker than I would do myself.</p><p>This guide assumes some basic knowledge of Crashplan and the service. Prior to this I initiated my migration request from Home to Pro on their website. It did fail for some reason but I managed to get help via their chat to quickly resolve that issue. As a Home subscriber, they have an offer of 1 client for $3/month for one year and then up to $10 after that. Regardless it is a very good price for unlimited storage as my Home subscription had over 6TB before I switched.</p><img src="/2018/07/20/setup-crashplan-for-small-business-using-docker-on-a-synology-nas/a192f0d6-33b3-409d-834c-22f26da324da.jpg" class=""><h2 id="Creating-the-docker-compose-yml-file"><a href="#Creating-the-docker-compose-yml-file" class="headerlink" title="Creating the docker-compose.yml file"></a>Creating the docker-compose.yml file</h2><p>Read up on the different features of the image on the GitHub project linked above.</p><p>As I install this on an older Synology (DSM 6.1), my version of docker and docker-compose support to version 2 of the compose file format, not that it matters in this case.</p><p>I create a service named “crashplan” but naming the actual container instance “crashplan-pro”. Other important settings are the Volume mappings and the Memory allocation for the Java runtime which is set to 3 Gigabytes in my case. I am redirecting the configuration path to outside the container as well, which will make container upgrades easier and also backup-able.</p><p>The hostname is used to get a display friendly name within CrashPlan device list.</p><p>Note that I’m mounting my volumes as read-only, which will fail a possible future restore process. Either mount the volumes are rw directly (by omitting the “:ro”) or change whenever you do a restore. In that case, remember to destroy and re-create the container first, as the compose settings are maintainted by instance. This is easiest done by “sudo docker-compose down” followed by a “sudo docker-compose up -d”.</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="symbol">services:</span></span><br><span class="line"><span class="symbol">  crashplan:</span></span><br><span class="line"><span class="symbol">    hostname:</span> docker-crashplan-synods01</span><br><span class="line"><span class="symbol">    container_name:</span> crashplan-pro</span><br><span class="line"><span class="symbol">    image:</span> jlesage/crashplan-pro</span><br><span class="line"><span class="symbol">    restart:</span> unless-stopped</span><br><span class="line"><span class="symbol">    environment:</span></span><br><span class="line">      - TZ=Europe/Stockholm</span><br><span class="line">      - KEEP_APP_RUNNING=<span class="number">1</span></span><br><span class="line">      - CRASHPLAN_SRV_MAX_MEM=<span class="number">3</span>G</span><br><span class="line"><span class="symbol">    ports:</span></span><br><span class="line">      - <span class="string">&quot;5800:5800&quot;</span></span><br><span class="line"><span class="symbol">    volumes:</span></span><br><span class="line">      - <span class="string">&quot;/volume4/docker/crashplan/config:/config&quot;</span></span><br><span class="line">      - <span class="string">&quot;/volume2:/volume2:ro&quot;</span></span><br><span class="line">      - <span class="string">&quot;/volume3:/volume3:ro&quot;</span></span><br><span class="line">      - <span class="string">&quot;/volume4:/volume4:ro&quot;</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><img src="/2018/07/20/setup-crashplan-for-small-business-using-docker-on-a-synology-nas/creating-the-docker-composeyml-file.png" class=""><p>Since I use my Synology as a Docker host, I’ve created the local folder structure as this:</p><p>In the root folder for the Docker, remember to pre-create any mapped folders first, such as the local mapped “config” folder. I’m placing my compose file and upgrade script (lazy version) in the same folder.</p><p>Whenever the configuration is done, start the container by: “sudo docker-compose up -d” from the terminal. You can watch any logs from the Synology Docker UI, it will show up as “crashplan-pro” in the list of running containers.</p><img src="/2018/07/20/setup-crashplan-for-small-business-using-docker-on-a-synology-nas/8dd5d7ee-1c42-44bc-abed-7de03436220f.png" class=""><p>Navigate to the host ip on port 5800 which will utilize the built-in VNC over HTTP service in the container.</p><p>Log in using your CrashPla Pro credentials.</p><img src="/2018/07/20/setup-crashplan-for-small-business-using-docker-on-a-synology-nas/43d1519c-7970-4da0-a700-c45e0dec5ccb.png" class=""><p>If you haven’t any existing backups defined, this is the welcome screen. Since my existing solution exceeds the migration limit of 1TB, I’m opting for the Add New button.</p><img src="/2018/07/20/setup-crashplan-for-small-business-using-docker-on-a-synology-nas/f84e89f2-2ea2-4c89-b9cb-d062aab4e8f3.png" class=""><p>I’m reusing my existing key</p><img src="/2018/07/20/setup-crashplan-for-small-business-using-docker-on-a-synology-nas/4336e716-2c29-4f62-a446-1cfd96d1c93b.png" class=""><p>Which I copy via the clipboard feature, which means clicking the button in the right-most corner.</p><img src="/2018/07/20/setup-crashplan-for-small-business-using-docker-on-a-synology-nas/b5c9211d-3b7d-4447-9b89-a786ed8eb12d.png" class=""><p>When all set, I click OK</p><img src="/2018/07/20/setup-crashplan-for-small-business-using-docker-on-a-synology-nas/aed675c7-3eb1-4b38-bdc6-c793271b8e41.png" class=""><p>I’m greeted with my existing devices from my previous Home account. I need to make sure to delete these when I’m finished as each device incurs a cost.</p><p>Make sure to specify the hostname for the container as this is used by the Crashplan client for the device list.</p><img src="/2018/07/20/setup-crashplan-for-small-business-using-docker-on-a-synology-nas/862bc0b0-3322-49dd-b08b-a79bdb7c1ee0.png" class=""><h2 id="Setting-global-defaults"><a href="#Setting-global-defaults" class="headerlink" title="Setting global defaults"></a>Setting global defaults</h2><p>To save some time, ensure to set default values before configuring. Make sure to hit the “Save” button at the very low end of the window, also ensure to push the configuration to the clients.</p><img src="/2018/07/20/setup-crashplan-for-small-business-using-docker-on-a-synology-nas/setting-global-defaults.png" class=""><h3 id="File-exclusions"><a href="#File-exclusions" class="headerlink" title="File exclusions"></a>File exclusions</h3><img src="/2018/07/20/setup-crashplan-for-small-business-using-docker-on-a-synology-nas/file-exclusions.png" class=""><h3 id="Custom-archive-encryption-key"><a href="#Custom-archive-encryption-key" class="headerlink" title="Custom archive encryption key"></a>Custom archive encryption key</h3><img src="/2018/07/20/setup-crashplan-for-small-business-using-docker-on-a-synology-nas/custom-archive-encryption-key.png" class=""><h2 id="Backup-Sets"><a href="#Backup-Sets" class="headerlink" title="Backup Sets"></a>Backup Sets</h2><p>This is the view for creating backup sets. By default only one is listed here.</p><img src="/2018/07/20/setup-crashplan-for-small-business-using-docker-on-a-synology-nas/backup-sets.png" class=""><img src="/2018/07/20/setup-crashplan-for-small-business-using-docker-on-a-synology-nas/2365c3d8-f9d3-4ae9-9493-59d7501be35b.png" class=""><img src="/2018/07/20/setup-crashplan-for-small-business-using-docker-on-a-synology-nas/9ff3005e-cd09-4ea6-bd55-1282d35ce948.png" class=""><h3 id="Adding-Backup-sets"><a href="#Adding-Backup-sets" class="headerlink" title="Adding Backup sets"></a>Adding Backup sets</h3><p>I was a bit worried before finding this feature.</p><img src="/2018/07/20/setup-crashplan-for-small-business-using-docker-on-a-synology-nas/adding-backup-sets.png" class=""><img src="/2018/07/20/setup-crashplan-for-small-business-using-docker-on-a-synology-nas/88544f7a-e5e7-42a9-bf13-ba3f2a7be869.png" class=""><h2 id="Setting-priority"><a href="#Setting-priority" class="headerlink" title="Setting priority"></a>Setting priority</h2><img src="/2018/07/20/setup-crashplan-for-small-business-using-docker-on-a-synology-nas/setting-priority.png" class=""><img src="/2018/07/20/setup-crashplan-for-small-business-using-docker-on-a-synology-nas/75210efb-f4b0-4c4d-a90a-e5dbdafc961b.png" class=""><h2 id="Exceeding-inotify’s-max-watch-limit"><a href="#Exceeding-inotify’s-max-watch-limit" class="headerlink" title="Exceeding inotify’s max watch limit"></a>Exceeding inotify’s max watch limit</h2><p>This error is bound to pop-up if you backup a significant amount of files. Fix by editing a configuration file as described below.</p><figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ERROR: </span>CrashPlan for Small Business is exceeding inotify&#x27;s max watch limit. Real-time file watching cannot work properly.  The inotify watch limit needs to be increased on the host.stdout</span><br><span class="line"> </span><br></pre></td></tr></table></figure><img src="/2018/07/20/setup-crashplan-for-small-business-using-docker-on-a-synology-nas/exceeding-inotify-s-max-watch-limit.png" class=""><p>To read up on the cause and mitigation, please read here: <a href="https://support.code42.com/CrashPlan/4/Troubleshooting/Linux_real-time_file_watching_errors">https://support.code42.com/CrashPlan/4/Troubleshooting/Linux_real-time_file_watching_errors</a></p><p>On a Synology, add the setting to the /etc.defaults/sysctl.conf file. Press “i” to enter edit mode and when finished press “esc” and then type “:wq” for “write” and “quit” respectively.</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo vi <span class="regexp">/etc.defaults/</span>sysctl.conf</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>The number is just taken from the example, I don’t know what the proper number is yet.</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">fs.inotify.max_user_watches</span>=<span class="number">1048576</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><img src="/2018/07/20/setup-crashplan-for-small-business-using-docker-on-a-synology-nas/a0eaad51-a67c-4ea5-b618-1c5afaf12fb1.png" class=""><h2 id="Deactivate-a-device"><a href="#Deactivate-a-device" class="headerlink" title="Deactivate a device"></a>Deactivate a device</h2><img src="/2018/07/20/setup-crashplan-for-small-business-using-docker-on-a-synology-nas/deactivate-a-device.png" class=""><img src="/2018/07/20/setup-crashplan-for-small-business-using-docker-on-a-synology-nas/08d14ade-b70c-446a-8eea-ecd792f2382f.png" class="">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Since CrashPlan for Home is about to close down, I had to swith to a new solution. I opted for staying with CrashPlan since it works pret
      
    
    </summary>
    
    
      <category term="docker" scheme="https://blog.rylander.io/tags/docker/"/>
    
      <category term="synology" scheme="https://blog.rylander.io/tags/synology/"/>
    
      <category term="crashplan" scheme="https://blog.rylander.io/tags/crashplan/"/>
    
  </entry>
  
  <entry>
    <title>Install PLEX on Synology NAS Using Docker Compose</title>
    <link href="https://blog.rylander.io/2018/01/09/install-plex-on-synology-nas-using-docker-compose/"/>
    <id>https://blog.rylander.io/2018/01/09/install-plex-on-synology-nas-using-docker-compose/</id>
    <published>2018-01-09T19:41:23.000Z</published>
    <updated>2018-01-09T19:41:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is an updated writeup of setting up PLEX Server using Docker Compose on a Synology NAS. Actually there is nothing specific about Synology rather than mapped folder paths. The <a href="http://blog.rylander.io/2016/11/19/install-plex-on-synology-nas-using-docker/">previous</a> setup uses the Synology UI but this version uses docker-compose, which is based on a configuration file. The running docker container instance will be visible in the Synology Docker UI and can also be controlled from there.</p><p>I’m using the release from Linuxserver <a href="https://github.com/linuxserver/docker-plex">https://github.com/linuxserver/docker-plex</a> as documented.</p><img src="/2018/01/09/install-plex-on-synology-nas-using-docker-compose/6db3de48-4e6d-4a01-bd7e-d604ddde6802.png" class=""><h2 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h2><p>Docker Compose uses a configuration file which is used instead of setting paramters via UI och cli. The advantage of a configuration file is it is very portable/movable and also resistant to UI crashes on Synology (which is the reason for this post as it happened to me now).</p><p>The ports to expose are <a href="https://support.plex.tv/hc/en-us/articles/201543147-What-network-ports-do-I-need-to-allow-through-my-firewall-">documented</a> on the Plex support site. </p><p>The environment node variables should be updated to reflect your preferences.</p><p>The volumes section is the most relevant:</p><p>/config - I’ve chosen to export the Plex configuration folder on my local NAS share for easy access</p><p>Mandatory is to let Plex access your media folders. The right side of the : is used for the container internal path, which for the library always starts with “/data/media” and then append your chose name. The left side is your absolute path to your media files.</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">version: &#x27;2&#x27;</span><br><span class="line">services:</span><br><span class="line">  linuxserver-plex:</span><br><span class="line">    container_name: linuxserver-plex</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    image: linuxserver/plex:latest</span><br><span class="line">    environment: </span><br><span class="line">    - TZ=Europe/Stockholm</span><br><span class="line">    - VERSION=latest</span><br><span class="line">    ports:</span><br><span class="line">    - &quot;32400:32400&quot; #(for access to the Plex Media Server) [required]</span><br><span class="line">    - &quot;32400:32400/udp&quot;</span><br><span class="line">    - &quot;32410:32410/udp&quot; #(for current GDM network discovery)</span><br><span class="line">    - &quot;32412:32412/udp&quot; </span><br><span class="line">    - &quot;32413:32413/udp&quot; </span><br><span class="line">    - &quot;32414:32414/udp&quot;</span><br><span class="line">    - &quot;32469:32469&quot; #(for access to the Plex DLNA Server)</span><br><span class="line">    - &quot;32469:32469/udp&quot;</span><br><span class="line">    - &quot;5353:5353&quot; # (for older Bonjour/Avahi network discovery)</span><br><span class="line">    #- &quot;1900:1900/udp&quot; #(for access to the Plex DLNA Server)</span><br><span class="line"></span><br><span class="line">    volumes:</span><br><span class="line">    - /volume4/docker/plex:/config</span><br><span class="line">    - /volume2/media2:/data/movies2</span><br><span class="line">    - /volume3/media/movies/[MOVIES]:/data/movies/MOVIES</span><br><span class="line">    - /volume3/media/movies/[BARN]:/data/movies/BARN</span><br><span class="line">    - /volume3/media/movies/[3D]:/data/movies/3D</span><br><span class="line">    - /volume3/media/[TV]:/data/tv</span><br></pre></td></tr></table></figure><img src="/2018/01/09/install-plex-on-synology-nas-using-docker-compose/docker-composeyml.png" class=""><p>The folder structure created when running Plex the first time. Note I’ve placed the docker-compose.yml file in the same folder, a convention rather than a rule. </p><img src="/2018/01/09/install-plex-on-synology-nas-using-docker-compose/3f39d386-1c29-42e0-adbe-923425a0abc5.png" class=""><h2 id="Starting-and-Stopping"><a href="#Starting-and-Stopping" class="headerlink" title="Starting and Stopping"></a>Starting and Stopping</h2><p>To start the container, place the docker-compose.yml file in the Plex folder I assume you have created as your Plex folder on the Docker host. In case of a Synology NAS, I’ve opted to place it in the same folder I export my Plex folders to.</p><p>Initial start, just to check for errors, you can type (sudo is neccessary on a Synology NAS):</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">sudo docker-compose up</span><br></pre></td></tr></table></figure><p>If everything works as expected, you can stop and cleanup using:</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">sudo docker-compose down</span><br></pre></td></tr></table></figure><p>The <em>down</em> command will also cleanup and remove the container.</p><p>Then to start it headless:</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure><p>Browse <a href="http://plex.rylander.io:32400/web/">http://plex.rylander.io:32400/web/</a> or whatever url you have in your setup.  </p><img src="/2018/01/09/install-plex-on-synology-nas-using-docker-compose/starting-and-stopping.png" class=""><h2 id="Updating-the-docker-image"><a href="#Updating-the-docker-image" class="headerlink" title="Updating the docker image"></a>Updating the docker image</h2><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">sudo docker-compose down</span><br><span class="line">sudo docker pull linuxserver/plex:latest</span><br><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is an updated writeup of setting up PLEX Server using Docker Compose on a Synology NAS. Actually there is nothing specific about Syn
      
    
    </summary>
    
    
      <category term="docker" scheme="https://blog.rylander.io/tags/docker/"/>
    
      <category term="synology" scheme="https://blog.rylander.io/tags/synology/"/>
    
      <category term="plex" scheme="https://blog.rylander.io/tags/plex/"/>
    
  </entry>
  
  <entry>
    <title>Setup Split VPN on Unifi USG Using PBR</title>
    <link href="https://blog.rylander.io/2018/01/07/setup-split-vpn-on-unifi-usg-using-pbr/"/>
    <id>https://blog.rylander.io/2018/01/07/setup-split-vpn-on-unifi-usg-using-pbr/</id>
    <published>2018-01-07T20:28:34.000Z</published>
    <updated>2018-01-07T20:28:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is a writeup for setting up a client OpenVPN (or any other VPN type) connection, but only use it for some clients/VLANS. I’m setting things up using a Unifi USG and the special config file. Since the UI is currently not supported for client OpenVPN configuration, although support is on the roadmap, this will show it is actually quite easy to setup.</p><p>As the UI is not yet supporting the configuration, the neccessary configuration needs to be entered into the special config.gateway.json file on the controller. The usual way to do this is to use the cli on the USG, do the configuration and then export the json and copy parts of it to the config.gateway.json file. I’ve done this, so you can easily just copy from my configuration and then edit the parts you want.</p><p>I’m reusing the work from Travis Cook’s <a href="https://github.com/TravisCook/Detour">Detour</a> in order to be able to select which device is using the VPN tunnel. It is making use of PBR and provides a UI to add predefined clients (really their IP address) to the list of IPs that are routed via the VPN. I’m using this mostly to access Netflix and similar services from ATVs and the like. I actually use a pptp VPN due to speed, but OpenVPN does perform with a single stream.</p><p>Known caveats: Som earlier revision of the USG firmware had a broken PBR. Guess how I know this!</p><img src="/2018/01/07/setup-split-vpn-on-unifi-usg-using-pbr/15a5add2-233c-465d-9d6b-78628d214491.jpg" class=""><h2 id="Get-familiar-with-the-config-json-structure-on-the-USG"><a href="#Get-familiar-with-the-config-json-structure-on-the-USG" class="headerlink" title="Get familiar with the config.json structure on the USG"></a>Get familiar with the config.json structure on the USG</h2><p>To get a formatted copy of the config.json file on your controller, you can dump the current configuration from your USG into a formatted file. Login to the USG and use the existing utility to create the file. I named my file with the suffix .json since I want my text editor to help out with formatting. Transfer the file back your computer for easy editing. I’m using Transmit since I’m on a Mac. Once the file is on your computer, use your favorite editing tool to open it. I use Visual Studio Code.</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">ssh admin@<span class="number">10.0</span><span class="number">.1</span><span class="number">.1</span>*</span><br><span class="line">mca-ctrl -t <span class="built_in">dump</span>-cfg &gt; <span class="built_in">config</span>.json*</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><em>To have the whole thing collapse, Ctrl/Cmd-K + Ctl/Cmd-0</em></p><p>*This way you see the top most nodes and their relative structure. In our own file, we will add configuration to several nodes, but not all and we can therefore copy the nodes we need including their structure. *</p><img src="/2018/01/07/setup-split-vpn-on-unifi-usg-using-pbr/get-familiar-with-the-configjson-structure-on-the-usg.png" class=""><h3 id="Location-of-the-config-gateway-json-file"><a href="#Location-of-the-config-gateway-json-file" class="headerlink" title="Location of the config.gateway.json file"></a>Location of the config.gateway.json file</h3><p>So the Unifi Controller provides an easy way to inject additional configuration. The location is site specific.</p><p>Since I’m running the Controller in a Docker container, I’ve chosen to expose most data and configuration outside of the container instance and I’m using a plain share since I’m hosting my Docker on a Synology NAS.</p><p>The controller merges this configuration when provisioning the USG device. If there are errors in this file, the provisioning process may end up in a loop so make sure to check the logs and the alert view in the Controller. I export all USG logs to a syslog server, which is handy to check for errors. You can also check the logs locally on the USG.</p><img src="/2018/01/07/setup-split-vpn-on-unifi-usg-using-pbr/location-of-the-configgatewayjson-file.png" class=""><h2 id="Overview-of-the-OpenVPN-settings-on-the-USG"><a href="#Overview-of-the-OpenVPN-settings-on-the-USG" class="headerlink" title="Overview of the OpenVPN settings on the USG"></a>Overview of the OpenVPN settings on the USG</h2><p>I highly recommend to only configure the OpenVPN connection first, to ensure the VPN actually works before proceeding with anything. </p><p>The OpenVPN configuration is placed into a local file on the USG. An additional credentials file is created.</p><p>Create the folder /config/openvpn on the USG</p><p>We place two files within this directory:</p><ul><li>The credentials file containing username and password</li><li>The client configuration file, specific to your chosen OpenVPN provider</li></ul><p>The OpenVPN client configuration is specific to your provider. I use Giganews/VyprVPN and the settings are retrieved from their sample files. I did need to add configuration to not pull and overwrite my Gateway and routing settings.</p><p>Actually we have three files, where one is copy of the other. Since I have several configuration files, I just copy the current file over the generic one. Initially I did want to use a symbolic link, but that didn’t work as expected.</p><img src="/2018/01/07/setup-split-vpn-on-unifi-usg-using-pbr/overview-of-the-openvpn-settings-on-the-usg.png" class=""><h3 id="Create-the-credentials-file"><a href="#Create-the-credentials-file" class="headerlink" title="Create the credentials file"></a>Create the credentials file</h3><p>Create the file /config/openvpn/password_filename. Provide you own username/password on two separate lines.</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">username</span></span><br><span class="line"><span class="attribute">password</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><img src="/2018/01/07/setup-split-vpn-on-unifi-usg-using-pbr/create-the-credentials-file.png" class=""><h3 id="Create-the-configuration-file-for-openvpn"><a href="#Create-the-configuration-file-for-openvpn" class="headerlink" title="Create the configuration file for openvpn"></a>Create the configuration file for openvpn</h3><p>Create the file /config/openvpn/gateway.ovpn containing the following:</p><p>I added the route-noexec parameter in order to block the VPN from overwriting my default routes and gateway settings.</p><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">#  _____ <span class="keyword">_</span>         _____               </span><br><span class="line"># |   <span class="type">__</span>|<span class="type">_</span>|<span class="type">___</span> ___|   <span class="type">| |___</span> <span class="keyword">_</span> <span class="keyword">_</span> <span class="keyword">_</span> ___ </span><br><span class="line"># |  <span class="type">|  | | . | .&#x27;| | | | -_</span>| <span class="type">| | |_</span> -|<span class="type"></span></span><br><span class="line"><span class="type"># |_____</span>|<span class="type">_</span>|<span class="type">_</span>  |<span class="type">__</span>,|<span class="type">_</span>|<span class="type">___</span>|<span class="type">___</span>|<span class="type">_____</span>|<span class="type">___</span>|<span class="type"></span></span><br><span class="line"><span class="type">#         |___</span>|                        <span class="type"></span></span><br><span class="line"><span class="type"></span></span><br><span class="line"><span class="type">client</span></span><br><span class="line">dev tun</span><br><span class="line">proto udp</span><br><span class="line">remote us5.vpn.giganews.com <span class="number">443</span></span><br><span class="line">resolv-retry infinite</span><br><span class="line">nobind</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line">persist-remote-ip</span><br><span class="line">;ca ca.vyprvpn.com.crt</span><br><span class="line">tls-remote us5.vpn.giganews.com</span><br><span class="line">auth-user-pass /config/openvpn/giganewsauth.txt</span><br><span class="line">comp-lzo</span><br><span class="line">verb <span class="number">3</span></span><br><span class="line">auth SHA256</span><br><span class="line">cipher AES<span class="number">-256</span>-CBC</span><br><span class="line">keysize <span class="number">256</span></span><br><span class="line">tls-cipher DHE-RSA-AES256-SHA:DHE-DSS-AES256-SHA:AES256-SHA</span><br><span class="line">route-noexec</span><br><span class="line">#route-nopull</span><br><span class="line"></span><br><span class="line">&lt;ca&gt;</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIEpDCCA4ygAwIBAgIJANd2Uwt7SabsMA0GCSqGSIb3DQEBBQUAMIGSMQswCQYD</span><br><span class="line">VQQGEwJLWTEUMBIGA1UECBMLR3JhbmRDYXltYW4xEzARBgNVBAcTCkdlb3JnZVRv</span><br><span class="line">d24xFzAVBgNVBAoTDkdvbGRlbkZyb2ctSW5jMRowGAYDVQQDExFHb2xkZW5Gcm9n</span><br><span class="line">LUluYyBDQTEjMCEGCSqGSIb3DQEJARYUYWRtaW5AZ29sZGVuZnJvZy5jb20wHhcN</span><br><span class="line">MTAwNDA5MjExOTIxWhcNMjAwNDA2MjExOTIxWjCBkjELMAkGA1UEBhMCS1kxFDAS</span><br><span class="line">BgNVBAgTC0dyYW5kQ2F5bWFuMRMwEQYDVQQHEwpHZW9yZ2VUb3duMRcwFQYDVQQK</span><br><span class="line">Ew5Hb2xkZW5Gcm9nLUluYzEaMBgGA1UEAxMRR29sZGVuRnJvZy1JbmMgQ0ExIzAh</span><br><span class="line">BgkqhkiG9w0BCQEWFGFkbWluQGdvbGRlbmZyb2cuY29tMIIBIjANBgkqhkiG9w0B</span><br><span class="line">AQEFAAOCAQ8AMIIBCgKCAQEA37JesfCwOj69el0AmqwXyiUJ2Bm+q0+eR9hYZEk7</span><br><span class="line">pVoj5dF9RrKirZyCM/<span class="number">9</span>zEvON5z4pZMYjhpzrq6eiLu3j1xV6lX73Hg0dcflweM5i</span><br><span class="line">qxFAHCwEFIiMpPwOgLV399sfHCuda11boIPE4SRooxUPEju908AGg/i+egntvvR2</span><br><span class="line">d7pnZl2SCJ1sxlbeAAkYjX6EXmIBFyJdmry1y05BtpdTgPmTlJ0cMj7DlU+<span class="number">2</span>gehP</span><br><span class="line">ss/q6YYRAhrKtlZwxeunc+RD04ieah+boYU0CBZinK2ERRuAjx3hbCE4b0S6eizr</span><br><span class="line">QmSuGFNu6Ghx+E1xasyl1Tz/fHgHl3P93Jf0tFov7uuygQIDAQABo4H6MIH3MB0G</span><br><span class="line">A1UdDgQWBBTh9HiMh5RnRVIt/ktXddiGkDkXBTCBxwYDVR0jBIG/MIG8gBTh9HiM</span><br><span class="line">h5RnRVIt/ktXddiGkDkXBaGBmKSBlTCBkjELMAkGA1UEBhMCS1kxFDASBgNVBAgT</span><br><span class="line">C0dyYW5kQ2F5bWFuMRMwEQYDVQQHEwpHZW9yZ2VUb3duMRcwFQYDVQQKEw5Hb2xk</span><br><span class="line">ZW5Gcm9nLUluYzEaMBgGA1UEAxMRR29sZGVuRnJvZy1JbmMgQ0ExIzAhBgkqhkiG</span><br><span class="line"><span class="number">9</span>w0BCQEWFGFkbWluQGdvbGRlbmZyb2cuY29tggkA13ZTC3tJpuwwDAYDVR0TBAUw</span><br><span class="line">AwEB/zANBgkqhkiG9w0BAQUFAAOCAQEAwihrN0QNE19RRvGywBvsYDmzmM5G8ta5</span><br><span class="line"><span class="number">8</span>yB+<span class="number">02</span>Mzbm0KuVxnPJaoVy4L4WocAnqLeKfmpYWUid1MPwDPtwtQ00U7QmRBRNLU</span><br><span class="line">hS6Bth1wXtuDvkRoHgymSvg1+wonJNpv/VquNgwt7XbC9oOjVEd9lbUd+ttxzboI</span><br><span class="line"><span class="number">8</span>P1ci6+I861PylA0DOv9j5bbn1oE0hP8wDv3bTklEa612zzEVnnfgw+ErVnkrnk8</span><br><span class="line"><span class="number">8</span>fTiv6NZtHgUOllMq7ymlV7ut+BPp20rjBdOCNn2Q7dNCKIkI45qkwHtXjzFXIxz</span><br><span class="line">Gq3tLVeC54g7XZIc7X0S9avgAE7h9SuRYmsSzvLTtiP1obMCHB5ebQ==</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">&lt;/ca&gt;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><img src="/2018/01/07/setup-split-vpn-on-unifi-usg-using-pbr/create-the-configuration-file-for-openvpn.png" class=""><h3 id="Adding-openvpn-node-to-interfaces"><a href="#Adding-openvpn-node-to-interfaces" class="headerlink" title="Adding openvpn node to interfaces"></a>Adding openvpn node to interfaces</h3><p>This is the only required change to the config.gateway.json file neccessary to test the OpenVPN client on the USG. Naturally the configuration file must be in place and correct for this to work.</p><p>If your config.gateway.json file was empty before this, this is the only content you need. Make sure it is valid json.</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;interfaces&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;openvpn&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;vtun0&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Giganews OpenVPN&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;config-file&quot;</span>: <span class="string">&quot;/config/openvpn/gateway.ovpn&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><img src="/2018/01/07/setup-split-vpn-on-unifi-usg-using-pbr/adding-openvpn-node-to-interfaces.png" class=""><h3 id="Verifying"><a href="#Verifying" class="headerlink" title="Verifying"></a>Verifying</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">ssh <span class="symbol">admin@</span><span class="number">10.0</span><span class="number">.1</span><span class="number">.1</span></span><br><span class="line">show <span class="built_in">int</span>erfaces</span><br><span class="line"> </span><br></pre></td></tr></table></figure><img src="/2018/01/07/setup-split-vpn-on-unifi-usg-using-pbr/verifying.png" class=""><h2 id="Overview-of-the-changes-to-config-gateway-json"><a href="#Overview-of-the-changes-to-config-gateway-json" class="headerlink" title="Overview of the changes to config.gateway.json"></a>Overview of the changes to config.gateway.json</h2><p>My existing config.gateway.json already contains configuration to host names, in order to ease initial setup and point static host names to my specific subnet and ip (setup.ubnt.com -&gt; USG ip). I do L3 adoption in additon to running inside Docker, which is problematic in the initial setup process for a USG.</p><p><strong>Interfaces</strong></p><p>We will add a new interface, a openvpn node and specifically vtun0 interface. We could add the configuration inside this node, but it is easier to just point out a specific configuration file which lives on the USG. This way we can make changes and updates and not need to reprovision anything.</p><p>We also need to specify which <em>modify</em> rule on our existing LAN configuration, which allows us to reroute all requests from inside our LAN which comes from specific ip addresses.</p><p><strong>Firewall</strong></p><p>In the firewall node we add a named group, which we will dynamically populate with ip addresses we want to reroute, thanks to the UI from Detour. If you don’t use Detour, you can instead add specific addresses or a range.</p><p>We also specify the actual named <em>modify</em> logic, which reroutes based on source ip.</p><p><strong>Protocols</strong></p><p>The protocols section contains the actual routing information used by the above <em>modify</em> firewall rule. Since we want to only reroute traffic for some devices, we define a separate interface-route to use in those cases. All other traffic is using the default routing and gateway.</p><p><strong>Service</strong></p><p>The service node contains the masquerade nat rule for the VPN. This magically solves how traffic sent out from the VPN makes it back through to us.</p><img src="/2018/01/07/setup-split-vpn-on-unifi-usg-using-pbr/overview-of-the-changes-to-configgatewayjson.png" class=""><h3 id="The-config-gateway-json-configuration"><a href="#The-config-gateway-json-configuration" class="headerlink" title="The config.gateway.json configuration"></a>The config.gateway.json configuration</h3><p>The USG is not allowing an empty value for the firewall group address-group node, so I’ve put an initial value there to get passed this bug. This may change in future firmware upgrades. If the configuration cannot be set on the USG, the controller provision process goes into an endless loop of trying to applying the configuration.</p><p>eth1 is my LAN port</p><p>The nat rule can actually be done via UI, but I’m including it here to keep all settings in one place. Make sure all keys and index number are free to use and adjust if neccessary.</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;firewall&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;group&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;address-group&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;vypr_nyc&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;address&quot;</span>: [</span><br><span class="line">                        <span class="string">&quot;10.0.1.254&quot;</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;modify&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;detour&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;rule&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;10&quot;</span>: &#123;</span><br><span class="line">                        <span class="attr">&quot;action&quot;</span>: <span class="string">&quot;modify&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Detour route to Giganews/Vypr VPN&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;modify&quot;</span>: &#123;</span><br><span class="line">                            <span class="attr">&quot;table&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">&quot;source&quot;</span>: &#123;</span><br><span class="line">                            <span class="attr">&quot;group&quot;</span>: &#123;</span><br><span class="line">                                <span class="attr">&quot;address-group&quot;</span>: <span class="string">&quot;vypr_nyc&quot;</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;interfaces&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;ethernet&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;eth1&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;firewall&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;in&quot;</span>: &#123;</span><br><span class="line">                        <span class="attr">&quot;modify&quot;</span>: <span class="string">&quot;detour&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;openvpn&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;vtun0&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Giganews OpenVPN&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;config-file&quot;</span>: <span class="string">&quot;/config/openvpn/gateway.ovpn&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;protocols&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;static&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;table&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;1&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;interface-route&quot;</span>: &#123;</span><br><span class="line">                        <span class="attr">&quot;0.0.0.0/0&quot;</span>: &#123;</span><br><span class="line">                            <span class="attr">&quot;next-hop-interface&quot;</span>: &#123;</span><br><span class="line">                                <span class="attr">&quot;vtun0&quot;</span>: <span class="string">&quot;&#x27;&#x27;&quot;</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;service&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;nat&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;rule&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;5004&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Masquerade for Giganews OpenVPN&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;outbound-interface&quot;</span>: <span class="string">&quot;vtun0&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;masquerade&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="Restart-OpenVPN-client"><a href="#Restart-OpenVPN-client" class="headerlink" title="Restart OpenVPN client"></a>Restart OpenVPN client</h2><p>Sometimes you need to restart the OpenVPN client, which can be done by disabling and then enabling the interface like this. The commit statements are key here which will bounce the interface. </p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">configure</span><br><span class="line"><span class="keyword">set</span> interfaces openvpn vtun0 <span class="keyword">disable</span></span><br><span class="line"><span class="keyword">commit</span></span><br><span class="line"><span class="keyword">delete</span> interfaces openvpn vtun0 <span class="keyword">disable</span></span><br><span class="line"><span class="keyword">commit</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><img src="/2018/01/07/setup-split-vpn-on-unifi-usg-using-pbr/restart-openvpn-client.png" class=""><h2 id="Quick-speedtest-result"><a href="#Quick-speedtest-result" class="headerlink" title="Quick speedtest result"></a>Quick speedtest result</h2><p>A quick speed test gives the following: Laptop -&gt; Wifi -&gt; USG -&gt; VPN -&gt; NYC USA endpoint -&gt; Stockholm Sweden and roundtrip.</p><img src="/2018/01/07/setup-split-vpn-on-unifi-usg-using-pbr/quick-speedtest-result.png" class="">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is a writeup for setting up a client OpenVPN (or any other VPN type) connection, but only use it for some clients/VLANS. I’m setting
      
    
    </summary>
    
    
      <category term="unifi" scheme="https://blog.rylander.io/tags/unifi/"/>
    
      <category term="vpn" scheme="https://blog.rylander.io/tags/vpn/"/>
    
      <category term="usg" scheme="https://blog.rylander.io/tags/usg/"/>
    
  </entry>
  
  <entry>
    <title>Install Nvm as a Oh-My-Zsh Plugin</title>
    <link href="https://blog.rylander.io/2017/11/13/install-nvm-as-a-oh-my-zsh-plugin/"/>
    <id>https://blog.rylander.io/2017/11/13/install-nvm-as-a-oh-my-zsh-plugin/</id>
    <published>2017-11-13T20:33:25.000Z</published>
    <updated>2017-11-13T20:33:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/lukechilds/zsh-nvm">https://github.com/lukechilds/zsh-nvm</a></p><img src="/2017/11/13/install-nvm-as-a-oh-my-zsh-plugin/c93114c3-cf3a-411f-803d-2d2647b38d27.png" class=""><h2 id="Install-nvm-custom-oh-my-zsh-plugin"><a href="#Install-nvm-custom-oh-my-zsh-plugin" class="headerlink" title="Install nvm custom oh-my-zsh plugin"></a>Install nvm custom oh-my-zsh plugin</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> [https://github.com/lukechilds/zsh-nvm](https://github.com/lukechilds/zsh-nvm) ~/.oh-my-zsh/custom/plugins/zsh-nvm</span><br><span class="line"> </span><br></pre></td></tr></table></figure><img src="/2017/11/13/install-nvm-as-a-oh-my-zsh-plugin/install-nvm-custom-oh-my-zsh-plugin.png" class=""><h3 id="Add-to-plugin-list"><a href="#Add-to-plugin-list" class="headerlink" title="Add to plugin list"></a>Add to plugin list</h3><p>Make sure to place the plugin close to the top, in case other plugins rely on nvm/npm.</p><p>Add the nvm plugin to get tab completion goodies</p><img src="/2017/11/13/install-nvm-as-a-oh-my-zsh-plugin/add-to-plugin-list.png" class=""><h3 id="Lazy-load-nvm"><a href="#Lazy-load-nvm" class="headerlink" title="Lazy load nvm"></a>Lazy load nvm</h3><p>If you want to lazy load nvm, you can add this line before loading the zsh-nvm plugin. This will speedup the loading of zsh, but nvm will be loaded when it is required, thus delaying that initial run.</p><img src="/2017/11/13/install-nvm-as-a-oh-my-zsh-plugin/lazy-load-nvm.png" class=""><h3 id="First-time-kicks-off-installation-of-nvm"><a href="#First-time-kicks-off-installation-of-nvm" class="headerlink" title="First time kicks off installation of nvm"></a>First time kicks off installation of nvm</h3><p>The first time you launch, the plugin will initialize and install the nvm environment.</p><img src="/2017/11/13/install-nvm-as-a-oh-my-zsh-plugin/first-time-kicks-off-installation-of-nvm.png" class=""><h3 id="Tab-completion"><a href="#Tab-completion" class="headerlink" title="Tab completion"></a>Tab completion</h3><p>If you also installed the nvm plugin, tab will now be an ever more magical key.</p><img src="/2017/11/13/install-nvm-as-a-oh-my-zsh-plugin/tab-completion.png" class=""><h2 id="Upgrade-nvm"><a href="#Upgrade-nvm" class="headerlink" title="Upgrade nvm"></a>Upgrade nvm</h2><p>The zsh-nvm plugin adds helper methods, such as nvm upgrade.</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nvm upgrade</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><img src="/2017/11/13/install-nvm-as-a-oh-my-zsh-plugin/upgrade-nvm.png" class=""><h2 id="List-available-nodejs-versions"><a href="#List-available-nodejs-versions" class="headerlink" title="List available nodejs versions"></a>List available nodejs versions</h2><p>To list available nodejs versions to install.</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nvm ls-remote</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="Install-latest-nodejs-version"><a href="#Install-latest-nodejs-version" class="headerlink" title="Install latest nodejs version"></a>Install latest nodejs version</h2><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nvm</span> install v<span class="number">9</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><img src="/2017/11/13/install-nvm-as-a-oh-my-zsh-plugin/install-latest-nodejs-version.png" class="">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/lukechilds/zsh-nvm&quot;&gt;https://github.com/lukechilds/zsh-nvm&lt;/a&gt;&lt;/p&gt;
&lt;img src=&quot;/2017/11/13/install-nvm-as-a-oh-m
      
    
    </summary>
    
    
      <category term="zsh" scheme="https://blog.rylander.io/tags/zsh/"/>
    
      <category term="nvm" scheme="https://blog.rylander.io/tags/nvm/"/>
    
  </entry>
  
  <entry>
    <title>Configure Zsh on macOS</title>
    <link href="https://blog.rylander.io/2017/11/13/configure-zsh-on-macos/"/>
    <id>https://blog.rylander.io/2017/11/13/configure-zsh-on-macos/</id>
    <published>2017-11-13T20:25:22.000Z</published>
    <updated>2017-11-13T20:25:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>What can I say, I’m such a sucker for eye candy I couldn’t resist installing the ZSH shell and the Agnoster theme.</p><p><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH">https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH</a> </p><img src="/2017/11/13/configure-zsh-on-macos/9dca86d5-5db9-441e-9688-7e2711541680.png" class=""><h2 id="Install-ZSH"><a href="#Install-ZSH" class="headerlink" title="Install ZSH"></a>Install ZSH</h2><p>I use Homebrew to install utilities.</p><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>zsh zsh-completions</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="Set-ZSH-as-default-shell"><a href="#Set-ZSH-as-default-shell" class="headerlink" title="Set ZSH as default shell"></a>Set ZSH as default shell</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">chsh -s <span class="constructor">$(<span class="params">which</span> <span class="params">zsh</span>)</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><img src="/2017/11/13/configure-zsh-on-macos/set-zsh-as-default-shell.png" class=""><h3 id="Install-oh-my-zsh"><a href="#Install-oh-my-zsh" class="headerlink" title="Install oh-my-zsh"></a>Install oh-my-zsh</h3><p>oh-my-zsh is a package manager, the upside being themes support. There are others, but this is older, stable and still popular.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="Configure-color-scheme-for-iTerm2"><a href="#Configure-color-scheme-for-iTerm2" class="headerlink" title="Configure color scheme for iTerm2"></a>Configure color scheme for iTerm2</h2><p>Solarized is nice</p><img src="/2017/11/13/configure-zsh-on-macos/configure-color-scheme-for-iterm2.png" class=""><h3 id="Powerline-fonts"><a href="#Powerline-fonts" class="headerlink" title="Powerline fonts"></a>Powerline fonts</h3><p>Patched Powerline fonts are used by many advanced themes and provides useful icons. </p><p>Make sure the fonts have been installed correctly. Either you can install them manually or run the install.sh script.</p><img src="/2017/11/13/configure-zsh-on-macos/powerline-fonts.png" class=""><h3 id="Configure-fonts-for-iTerm2"><a href="#Configure-fonts-for-iTerm2" class="headerlink" title="Configure fonts for iTerm2"></a>Configure fonts for iTerm2</h3><p>Select the proper, pre-patched fonts marked as Powerline fonts. Make sure you set the fonts for non-ASCII as well.</p><img src="/2017/11/13/configure-zsh-on-macos/configure-fonts-for-iterm2.png" class=""><h3 id="Solarized-Dark-theme-in-iTerm2"><a href="#Solarized-Dark-theme-in-iTerm2" class="headerlink" title="Solarized Dark theme in iTerm2"></a>Solarized Dark theme in iTerm2</h3><p>This is how the Solarized Dark theme looks like in iTerm2 using above settings and the “agnoster” theme.</p><p>If you are on a newer MBP with a touch bar, you can change color themes within iTerm from the touch bar.</p><img src="/2017/11/13/configure-zsh-on-macos/solarized-dark-theme-in-iterm2.png" class=""><h2 id="Setting-oh-my-zsh-theme"><a href="#Setting-oh-my-zsh-theme" class="headerlink" title="Setting oh-my-zsh theme"></a>Setting oh-my-zsh theme</h2><p>I’ve chosen the Agnoster theme. It looks great but may be sluggish on large sets. The are many alternatives that look similar, so try them out. </p><p>The Powerlevel9 theme is a well known alternative, which is supposedly great for prompt customizations and speed optimized <a href="(https://github.com/bhilburn/powerlevel9k).">(https://github.com/bhilburn/powerlevel9k).</a></p><p>Select theme (built-in) by editing the ~/.zshrc file.</p><p>Custom theme, such as the powerlevel9k theme, needs to be custom installed.</p><img src="/2017/11/13/configure-zsh-on-macos/setting-oh-my-zsh-theme.png" class=""><h3 id="Intall-the-custom-Powerlevel9k-theme"><a href="#Intall-the-custom-Powerlevel9k-theme" class="headerlink" title="Intall the custom Powerlevel9k theme"></a>Intall the custom Powerlevel9k theme</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone [https:<span class="regexp">//gi</span>thub.com<span class="regexp">/bhilburn/</span>powerlevel9k.git](https:<span class="regexp">//gi</span>thub.com<span class="regexp">/bhilburn/</span>powerlevel9k.git) ~<span class="regexp">/.oh-my-zsh/</span>custom<span class="regexp">/themes/</span>powerlevel9k</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>Specify the theme in the ~/.zshrc file:</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">ZSH_THEME</span>=<span class="string">&quot;powerlevel9k/powerlevel9k&quot;</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><img src="/2017/11/13/configure-zsh-on-macos/intall-the-custom-powerlevel9k-theme.png" class=""><h3 id="Powerlevel9k-in-action"><a href="#Powerlevel9k-in-action" class="headerlink" title="Powerlevel9k in action"></a>Powerlevel9k in action</h3><img src="/2017/11/13/configure-zsh-on-macos/powerlevel9k-in-action.png" class="">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;What can I say, I’m such a sucker for eye candy I couldn’t resist installing the ZSH shell and the Agnoster theme.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https:
      
    
    </summary>
    
    
      <category term="zsh" scheme="https://blog.rylander.io/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>Setup L2tp VPN on USG Using Radius Account</title>
    <link href="https://blog.rylander.io/2017/07/07/setup-l2tp-vpn-on-usg-using-radius-account/"/>
    <id>https://blog.rylander.io/2017/07/07/setup-l2tp-vpn-on-usg-using-radius-account/</id>
    <published>2017-07-07T07:49:58.000Z</published>
    <updated>2017-07-07T07:49:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is a writeup of the UBNT article for setting up client access to the VPN L2TP server on the USG using the new Radius capability: <a href="https://help.ubnt.com/hc/en-us/articles/115005445768">https://help.ubnt.com/hc/en-us/articles/115005445768</a> </p><p>The new wizards automatically setup the neccessary firewall openings for L2TP. Allowed internal networks are set to 0.0.0.0/0 which allows a client to access any IP range within your LAN. Updating these to proper ranges require CLI, if you are not fine with that.</p><img src="/2017/07/07/setup-l2tp-vpn-on-usg-using-radius-account/3b396b31-4425-44f0-9ec4-3631f6bcdaaa.png" class=""><h2 id="Create-a-Radius-service"><a href="#Create-a-Radius-service" class="headerlink" title="Create a Radius service"></a>Create a Radius service</h2><p>First start and setup the built-in Radius service. If you run the controller in a container, you need to expose the ports to the host.</p><img src="/2017/07/07/setup-l2tp-vpn-on-usg-using-radius-account/create-a-radius-service.png" class=""><h2 id="Create-a-new-Radius-User"><a href="#Create-a-new-Radius-User" class="headerlink" title="Create a new Radius User"></a>Create a new Radius User</h2><p>Create your user of choice and give it a password. Tag it for the specific usage tunnel type.</p><img src="/2017/07/07/setup-l2tp-vpn-on-usg-using-radius-account/create-a-new-radius-user.png" class=""><h2 id="Create-L2TP-VPN-settings"><a href="#Create-L2TP-VPN-settings" class="headerlink" title="Create L2TP VPN settings"></a>Create L2TP VPN settings</h2><p>Choose a network range which is close to your LAN as some clients cannot route traffic to your local address range unless it falls wihtin /8. This step is important if you are using an iPhone or equivalent and not setting it up using the proper profile utility and instead is setting things up from the iPhone UI.</p><p>Here I’m using my local DNS service, since I want access to my internal LAN services.</p><img src="/2017/07/07/setup-l2tp-vpn-on-usg-using-radius-account/create-l2tp-vpn-settings.png" class="">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is a writeup of the UBNT article for setting up client access to the VPN L2TP server on the USG using the new Radius capability: &lt;a 
      
    
    </summary>
    
    
      <category term="ubnt" scheme="https://blog.rylander.io/tags/ubnt/"/>
    
      <category term="unifi" scheme="https://blog.rylander.io/tags/unifi/"/>
    
      <category term="vpn" scheme="https://blog.rylander.io/tags/vpn/"/>
    
  </entry>
  
</feed>
